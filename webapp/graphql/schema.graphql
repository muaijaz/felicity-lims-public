directive @hasPermission on FIELD_DEFINITION

directive @isAuthenticated on FIELD_DEFINITION

input ARResultInputType {
  uid: String!
  result: String!
  methodUid: String!
  laboratoryInstrumentUid: String!
  reportable: Boolean = true
}

input ARSampleInputType {
  sampleType: String!
  profiles: [String!]!
  analyses: [String!]!
  dateCollected: String!
  dateReceived: String!
}

type AbxASTPanelCursorPage {
  pageInfo: PageInfo!
  edges: [AbxASTPanelEdge!]
  items: [AbxASTPanelType!]
  totalCount: Int!
}

type AbxASTPanelEdge {
  cursor: String!
  node: AbxASTPanelType!
}

input AbxASTPanelInputType {
  name: String!
  description: String = null
  antibiotics: [String!]!
  organisms: [String!]!
  active: Boolean! = true
}

""""""
union AbxASTPanelResponse = AbxASTPanelType | OperationError

type AbxASTPanelType {
  uid: String!
  name: String!
  description: String
  organisms: [AbxOrganismType!]
  antibiotics: [AbxAntibioticType!]
  active: Boolean!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

""""""
union AbxASTResultResponse = AbxASTResultsType | OperationError

type AbxASTResultType {
  uid: String!
  organismResultUid: String!
  analysisResultUid: String!
  analysisResult: AnalysisResultType
  antibioticUid: String!
  antibiotic: AbxAntibioticType
  astMethodUid: String
  astMethod: AbxTestMethodType
  guidelineYearUid: String
  guidelineYear: AbxGuidelineYearType
  breakpointUid: String
  breakpoint: AbxBreakpointTyp
  astValue: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxASTResultUpdateInput {
  uid: String!
  astMethodUid: String = null
  guidelineYearUid: String = null
  astValue: String = null
  reportable: Boolean = null
  result: String = null
}

type AbxASTResultsType {
  astResults: [AbxASTResultType!]!
}

input AbxASTResultsUpdateInput {
  results: [AbxASTResultUpdateInput!]!
}

type AbxAntibioticCursorPage {
  pageInfo: PageInfo!
  edges: [AbxAntibioticEdge!]
  items: [AbxAntibioticType!]
  totalCount: Int!
}

type AbxAntibioticEdge {
  cursor: String!
  node: AbxAntibioticType!
}

type AbxAntibioticGuidelineType {
  uid: String!
  antibioticUid: String!
  antibiotic: AbxAntibioticType
  guidelineUid: String!
  guideline: AbxGuidelineType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxAntibioticInputType {
  name: String!
  guidelines: [String!]!
  whonetAbxCode: String = null
  whoCode: String = null
  dinCode: String = null
  jacCode: String = null
  eucastCode: String = null
  userCode: String = null
  abxNumber: String = null
  potency: String = null
  atcCode: String = null
  class_: String = null
  subclass: String = null
  profClass: String = null
  ciaCategory: String = null
  clsiOrder: String = null
  eucastOrder: String = null
  human: Boolean = null
  veterinary: Boolean = null
  animalGp: String = null
  loinccomp: String = null
  loincgen: String = null
  loincdisk: String = null
  loincmic: String = null
  loincetest: String = null
  loincslow: String = null
  loincafb: String = null
  loincsbt: String = null
  loincmlc: String = null
  comments: String = null
}

""""""
union AbxAntibioticResponse = AbxAntibioticType | OperationError

type AbxAntibioticType {
  uid: String!
  name: String!
  whonetAbxCode: String
  whoCode: String
  dinCode: String
  jacCode: String
  eucastCode: String
  userCode: String
  abxNumber: String
  potency: String
  atcCode: String
  class_: String
  subclass: String
  profClass: String
  ciaCategory: String
  clsiOrder: String
  eucastOrder: String
  human: Boolean
  veterinary: Boolean
  animalGp: String
  loinccomp: String
  loincgen: String
  loincdisk: String
  loincmic: String
  loincetest: String
  loincslow: String
  loincafb: String
  loincsbt: String
  loincmlc: String
  comments: String
  guidelines: [AbxGuidelineType!]
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxApplyAstPanelInput {
  sampleUid: String!
  panelUid: String!
  organismResultUid: String!
}

input AbxBreakpointInputType {
  guidelineUid: String!
  year: Int = null
  testMethod: String!
  potency: String = null
  organismCode: String!
  organismCodeType: String!
  breakpointTypeUid: String!
  hostUid: String = null
  siteOfInfectionUid: String = null
  referenceTable: String = null
  referenceSequence: String = null
  whonetAbxCode: String = null
  comments: String = null
  r: String = null
  i: String = null
  sdd: String = null
  s: String = null
  ecvEcoff: String = null
  ecvEcoffTentative: String = null
}

""""""
union AbxBreakpointResponse = AbxBreakpointTyp | OperationError

type AbxBreakpointTyp {
  uid: String!
  guidelineYearUid: String!
  guidelineYear: AbxGuidelineYearType
  testMethodUid: String!
  testMethod: AbxTestMethodType
  potency: String
  organismCode: String!
  organismCodeType: String!
  breakpointTypeUid: String!
  breakpointType: AbxBreakpointTypeTyp
  hostUid: String
  host: AbxHostType
  siteOfInfectionUid: String
  siteOfInfection: AbxSiteOfInfectionType
  referenceTable: String
  referenceSequence: String
  whonetAbxCode: String
  comments: String
  r: String
  i: String
  sdd: String
  s: String
  ecvEcoff: String
  ecvEcoffTentative: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type AbxBreakpointTypCursorPage {
  pageInfo: PageInfo!
  edges: [AbxBreakpointTypEdge!]
  items: [AbxBreakpointTyp!]
  totalCount: Int!
}

type AbxBreakpointTypEdge {
  cursor: String!
  node: AbxBreakpointTyp!
}

input AbxBreakpointTypeInputType {
  name: String!
  description: String = null
}

""""""
union AbxBreakpointTypeResponse = AbxBreakpointTypeTyp | OperationError

type AbxBreakpointTypeTyp {
  uid: String!
  name: String!
  description: String
  laboratoryUid: String
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxClassInputType {
  name: String!
  phylumUid: String = null
}

""""""
union AbxClassResponse = AbxClassType | OperationError

type AbxClassType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  phylumUid: String
  phylum: AbxPhylumType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type AbxExpResPhenotypeCursorPage {
  pageInfo: PageInfo!
  edges: [AbxExpResPhenotypeEdge!]
  items: [AbxExpResPhenotypeType!]
  totalCount: Int!
}

type AbxExpResPhenotypeEdge {
  cursor: String!
  node: AbxExpResPhenotypeType!
}

input AbxExpResPhenotypeInputType {
  guidelineUid: String!
  referenceTable: String!
  organismCode: String!
  organismCodeType: String!
  exceptionOrganismCode: String!
  exceptionOrganismCodeType: String!
  abxCode: String!
  abxCodeType: String!
  antibioticExceptions: String!
  comments: String = null
}

""""""
union AbxExpResPhenotypeResponse = AbxExpResPhenotypeType | OperationError

type AbxExpResPhenotypeType {
  uid: String!
  guidelineUid: String!
  guideline: AbxGuidelineType
  referenceTable: String
  organismCode: String!
  organismCodeType: String!
  exceptionOrganismCode: String!
  exceptionOrganismCodeType: String!
  abxCode: String!
  abxCodeType: String!
  antibioticExceptions: String!
  comments: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type AbxExpertInterpretationRuleCursorPage {
  pageInfo: PageInfo!
  edges: [AbxExpertInterpretationRuleEdge!]
  items: [AbxExpertInterpretationRuleType!]
  totalCount: Int!
}

type AbxExpertInterpretationRuleEdge {
  cursor: String!
  node: AbxExpertInterpretationRuleType!
}

input AbxExpertInterpretationRuleInputType {
  ruleCode: String!
  description: String = null
  organismCode: String!
  organismCodeType: String!
  ruleCriteria: String!
  affectedAntibiotics: String!
  antibioticExceptions: String!
}

""""""
union AbxExpertInterpretationRuleResponse = AbxExpertInterpretationRuleType | OperationError

type AbxExpertInterpretationRuleType {
  uid: String!
  ruleCode: String!
  description: String
  organismCode: String!
  organismCodeType: String!
  ruleCriteria: String!
  affectedAntibiotics: String!
  antibioticExceptions: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxFamilyInputType {
  name: String!
  orderUid: String = null
}

""""""
union AbxFamilyResponse = AbxFamilyType | OperationError

type AbxFamilyType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  orderUid: String
  order: AbxOrderType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxGenusInputType {
  name: String!
  familyUid: String = null
}

""""""
union AbxGenusResponse = AbxGenusType | OperationError

type AbxGenusType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  familyUid: String
  family: AbxFamilyType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxGuidelineInputType {
  name: String!
  code: String = ""
  description: String = ""
}

""""""
union AbxGuidelineResponse = AbxGuidelineType | OperationError

type AbxGuidelineType {
  uid: String!
  name: String!
  code: String
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type AbxGuidelineYearType {
  uid: String!
  guidelineUid: String!
  guideline: AbxGuidelineType
  year: Int!
  code: String!
}

input AbxHostInputType {
  name: String!
  description: String = null
}

""""""
union AbxHostResponse = AbxHostType | OperationError

type AbxHostType {
  uid: String!
  name: String!
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxKingdomInputType {
  name: String!
}

""""""
union AbxKingdomResponse = AbxKingdomType | OperationError

type AbxKingdomType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxMediumInputType {
  name: String!
  description: String = null
}

""""""
union AbxMediumResponse = AbxMediumType | OperationError

type AbxMediumType {
  uid: String!
  name: String!
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxOrderInputType {
  name: String!
  classUid: String = null
}

""""""
union AbxOrderResponse = AbxOrderType | OperationError

type AbxOrderType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  classUid: String
  class_: AbxClassType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type AbxOrganismCursorPage {
  pageInfo: PageInfo!
  edges: [AbxOrganismEdge!]
  items: [AbxOrganismType!]
  totalCount: Int!
}

type AbxOrganismEdge {
  cursor: String!
  node: AbxOrganismType!
}

input AbxOrganismInputType {
  name: String!
  whonetOrgCode: String = null
  replacedBy: String = null
  taxonomicStatus: String = null
  common: String = null
  organismType: String = null
  anaerobe: Boolean = null
  morphology: String = null
  kingdomUid: String = null
  phylumUid: String = null
  classUid: String = null
  orderUid: String = null
  familyUid: String = null
  genusUid: String = null
  comments: String = null
}

""""""
union AbxOrganismResponse = AbxOrganismType | OperationError

type AbxOrganismResultType {
  uid: String!
  analysisResultUid: String!
  organismUid: String
  organism: AbxOrganismType
  isolateNumber: Int
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type AbxOrganismSerotypeCursorPage {
  pageInfo: PageInfo!
  edges: [AbxOrganismSerotypeEdge!]
  items: [AbxOrganismSerotypeType!]
  totalCount: Int!
}

type AbxOrganismSerotypeEdge {
  cursor: String!
  node: AbxOrganismSerotypeType!
}

input AbxOrganismSerotypeInputType {
  organismUid: String!
  serotype: String!
  serogroup: String = null
  subspecies: String = null
  oAntigens: String = null
  hPhase1: String = null
  hPhase2: String = null
  x997Check: String = null
  fate: String = null
}

""""""
union AbxOrganismSerotypeResponse = AbxOrganismSerotypeType | OperationError

type AbxOrganismSerotypeType {
  uid: String!
  organismUid: String!
  organism: AbxOrganismType
  serotype: String!
  serogroup: String
  subspecies: String
  oAntigens: String
  hPhase1: String
  hPhase2: String
  x997Check: String
  fate: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type AbxOrganismType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  whonetOrgCode: String
  replacedBy: String
  taxonomicStatus: String
  common: String
  organismType: String
  anaerobe: Boolean
  morphology: String
  subkingdomCode: String
  familyCode: String
  genusGroup: String
  genusCode: String
  speciesGroup: String
  serovarGroup: String
  msfGrpClin: String
  sctCode: String
  sctText: String
  gbifTaxonId: String
  gbifDatasetId: String
  gbifTaxonomicStatus: String
  kingdomUid: String
  kingdom: AbxKingdomType
  phylumUid: String
  phylum: AbxPhylumType
  classUid: String
  class_: AbxClassType
  orderUid: String
  order: AbxOrderType
  familyUid: String
  family: AbxFamilyType
  genusUid: String
  genus: AbxGenusType
  comments: String
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxPhylumInputType {
  name: String!
  kingdomUid: String = null
}

""""""
union AbxPhylumResponse = AbxPhylumType | OperationError

type AbxPhylumType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  kingdomUid: String
  kingdom: AbxKingdomType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type AbxQCRangeCursorPage {
  pageInfo: PageInfo!
  edges: [AbxQCRangeEdge!]
  items: [AbxQCRangeType!]
  totalCount: Int!
}

type AbxQCRangeEdge {
  cursor: String!
  node: AbxQCRangeType!
}

input AbxQCRangeInputType {
  guidelineUid: String!
  year: Int!
  strain: String!
  referenceTable: String!
  whonetOrgCode: String!
  antibiotic: String!
  abxTest: String!
  whonetAbxCode: String!
  method: String!
  mediumUid: String = null
  minimum: String = null
  maximum: String = null
}

""""""
union AbxQCRangeResponse = AbxQCRangeType | OperationError

type AbxQCRangeType {
  uid: String!
  guidelineUid: String!
  guideline: AbxGuidelineType
  year: Int!
  strain: String!
  referenceTable: String!
  whonetOrgCode: String!
  antibiotic: String!
  abxTest: String!
  whonetAbxCode: String!
  method: String!
  mediumUid: String
  medium: AbxMediumType
  minimum: String
  maximum: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxSiteOfInfectionInputType {
  name: String!
  description: String = null
}

""""""
union AbxSiteOfInfectionResponse = AbxSiteOfInfectionType | OperationError

type AbxSiteOfInfectionType {
  uid: String!
  name: String!
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input AbxTestMethodInputType {
  name: String!
  description: String = null
}

""""""
union AbxTestMethodResponse = AbxTestMethodType | OperationError

type AbxTestMethodType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  description: String
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type ActivityFeedType {
  uid: String!
  name: String!
  subscribers: [UserType!]
  laboratoryUid: String
  laboratory: LaboratoryType
}

type ActivityProcessType {
  uid: String!
  objectType: String!
  status: String!
  laboratoryUid: String
  laboratory: LaboratoryType
}

type ActivityStreamType {
  uid: String!
  feeds: [ActivityFeedType!]
  actorUid: String
  verb: String
  actionObjectType: NotificationObjectType
  actionObjectUid: String
  targetUid: String
  target: String
  viewers: [UserType!]
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  actor: UserType!
  actionObject: WorkSheetTypeSampleTypeAnalysisResultTypeReportMetaTypeUnknownObjectType!
}

input AllergyInput {
  allergen: String!
  allergenType: String = null
  severity: String = null
  reaction: String = null
  onsetDate: String = null
  verified: Boolean! = false
  notes: String = null
}

type AllergyType {
  allergen: String!
  allergenType: String
  severity: String
  reaction: String
  onsetDate: String
  verified: Boolean!
  notes: String
}

input AnalysisCategoryInputType {
  name: String!
  departmentUid: String = null
  description: String = null
  active: Boolean = true
}

"""Union of possible outcomes when adding a new notice"""
union AnalysisCategoryResponse = AnalysisCategoryType | OperationError

type AnalysisCategoryType {
  uid: String!
  name: String!
  departmentUid: String
  department: DepartmentType
  description: String
  active: Boolean!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input AnalysisCorrectionFactorInput {
  factor: Float!
  analysisUid: String!
  instrumentUid: String!
  methodUid: String!
}

""""""
union AnalysisCorrectionFactorResponse = AnalysisCorrectionFactorType | OperationError

type AnalysisCorrectionFactorType {
  uid: String!
  factor: Float!
  analysisUid: String!
  instrumentUid: String!
  methodUid: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type AnalysisCursorPage {
  pageInfo: PageInfo!
  edges: [AnalysisEdge!]
  items: [AnalysisWithProfiles!]
  totalCount: Int!
}

input AnalysisDetectionLimitInput {
  lowerLimit: Float!
  upperLimit: Float!
  analysisUid: String!
  instrumentUid: String!
  methodUid: String!
}

""""""
union AnalysisDetectionLimitResponse = AnalysisDetectionLimitType | OperationError

type AnalysisDetectionLimitType {
  uid: String!
  lowerLimit: Float!
  upperLimit: Float!
  analysisUid: String!
  instrumentUid: String!
  methodUid: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

""""""
union AnalysisDiscountResponse = AnalysisDiscountType | OperationError

type AnalysisDiscountType {
  uid: String!
  analysisUid: String!
  analysis: AnalysisType!
  name: String!
  discountType: String!
  valueType: String!
  startDate: DateTime!
  endDate: DateTime!
  voucherUid: String
  voucher: VoucherType
  valuePercent: Float!
  valueAmount: Float!
  isActive: Boolean!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type AnalysisEdge {
  cursor: String!
  node: AnalysisWithProfiles!
}

input AnalysisInputType {
  name: String!
  keyword: String!
  sortKey: Int!
  description: String! = ""
  departmentUid: String = null
  sampleTypes: [String!]
  methods: [String!]
  categoryUid: String = null
  unitUid: String = null
  internalUse: Boolean = false
  tatLengthMinutes: Int!
  precision: Int = null
  requiredVerifications: Int! = 1
  selfVerification: Boolean = false
  active: Boolean = true
}

input AnalysisInterimInput {
  key: Int!
  value: String!
  analysisUid: String!
  instrumentUid: String!
}

""""""
union AnalysisInterimResponse = AnalysisInterimType | OperationError

type AnalysisInterimType {
  uid: String!
  key: Int!
  value: String!
  analysisUid: String!
  instrumentUid: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input AnalysisMappingInputType {
  analysisUid: String!
  codingStandardUid: String!
  name: String!
  code: String!
  description: String = null
}

"""Union of possible outcomes when adding a new notice"""
union AnalysisMappingResponse = AnalysisMappingType | OperationError

type AnalysisMappingType {
  uid: String!
  analysisUid: String!
  analysis: AnalysisType
  codingStandardUid: String!
  codingStandard: CodingStandardType
  name: String
  description: String
  code: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

""""""
union AnalysisPriceResponse = AnalysisPriceType | OperationError

type AnalysisPriceType {
  uid: String!
  analysisUid: String!
  analysis: AnalysisType!
  isActive: Boolean!
  amount: Float!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

"""Union of possible outcomes when adding a new notice"""
union AnalysisProfileResponse = ProfileType | OperationError

type AnalysisRequestCursorPage {
  pageInfo: PageInfo!
  edges: [AnalysisRequestEdge!]
  items: [AnalysisRequestWithSamples!]
  totalCount: Int!
}

type AnalysisRequestEdge {
  cursor: String!
  node: AnalysisRequestWithSamples!
}

input AnalysisRequestInputType {
  patientUid: String!
  clientUid: String!
  clientContactUid: String!
  clinicalData: ClinicalDataInputType = null
  samples: [ARSampleInputType!]!
  clientRequestId: String = null
  internalUse: Boolean = false
  priority: Int! = 0
}

"""Union of possible outcomes when adding/editing analysis requests """
union AnalysisRequestResponse = AnalysisRequestWithSamples | OperationError

type AnalysisRequestType {
  uid: String!
  patientUid: String!
  patient: PatientType!
  clientUid: String!
  requestId: String!
  clientRequestId: String!
  clientContactUid: String
  clientContact: ClientContactType
  clinicalData: [ClinicalDataType!]
  internalUse: Boolean!
  isBilled: Boolean!
  isLocked: Boolean!
  metadataSnapshot: JSONScalar
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  samples: [SampleType!]!
  client: ClientType
}

type AnalysisRequestWithSamples {
  uid: String!
  patientUid: String!
  patient: PatientType!
  clientUid: String!
  requestId: String!
  clientRequestId: String!
  clientContactUid: String
  clientContact: ClientContactType
  clinicalData: [ClinicalDataType!]
  internalUse: Boolean!
  isBilled: Boolean!
  isLocked: Boolean!
  metadataSnapshot: JSONScalar
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  samples: [SampleType!]
  client: ClientType
}

type AnalysisResultCursorPage {
  pageInfo: PageInfo!
  edges: [AnalysisResultEdge!]
  items: [AnalysisResultType!]
  totalCount: Int!
}

type AnalysisResultEdge {
  cursor: String!
  node: AnalysisResultType!
}

"""Union of possible outcomes when actioning samples"""
union AnalysisResultResponse = ResultListingType | OperationError

"""Union of possible outcomes when submitting/verifying results"""
union AnalysisResultSubmitResponse = ResultOperationType | OperationError

type AnalysisResultType {
  uid: String!
  sampleUid: String!
  sample: SampleType!
  worksheetUid: String
  worksheetPosition: Int
  assigned: Boolean!
  analysisUid: String
  laboratoryInstrumentUid: String
  methodUid: String
  result: String
  analystUid: String
  analyst: UserType
  submittedByUid: String
  submittedBy: UserType
  dateSubmitted: DateTime
  verifiedBy: [UserType!]
  dateVerified: DateTime
  invalidatedBy: UserType
  invalidatedByUid: String
  dateInvalidated: DateTime
  dueDate: String
  dateCancelled: DateTime
  cancelledByUid: String
  cancelledBy: UserType
  retest: Boolean!
  parentId: String
  parent: AnalysisResultType
  reportable: Boolean!
  status: String
  reflexLevel: Int
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  metadataSnapshot: JSONScalar
  laboratoryUid: String
  worksheetId: String
  laboratoryInstrument: LaboratoryInstrumentType
  method: MethodType
  analysis: AnalysisType
}

input AnalysisSpecificationInput {
  analysisUid: String!
  min: Float = null
  max: Float = null
  minWarn: Float = null
  maxWarn: Float = null
  minReport: String = null
  maxReport: String = null
  warnValues: String = null
  warnReport: String = null
  gender: String = null
  ageMin: Int = null
  ageMax: Int = null
  methodUid: String = null
  unitUid: String = null
}

""""""
union AnalysisSpecificationResponse = AnalysisSpecificationType | OperationError

type AnalysisSpecificationType {
  uid: String!
  analysisUid: String!
  min: Float
  max: Float
  minWarn: Float
  maxWarn: Float
  minReport: String
  maxReport: String
  warnValues: String
  warnReport: String
  gender: String
  ageMin: Int
  ageMax: Int
  methodUid: String
  unitUid: String
  unit: UnitType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input AnalysisTemplateInputType {
  name: String!
  description: String! = ""
  departmentUid: String = null
  services: [String!]
}

"""Union of possible outcomes"""
union AnalysisTemplateResponse = AnalysisTemplateType | OperationError

type AnalysisTemplateType {
  uid: String!
  name: String!
  description: String
  departmentUid: String
  department: DepartmentType
  analyses: [AnalysisType!]
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type AnalysisType {
  uid: String!
  name: String!
  description: String
  keyword: String
  departmentUid: String
  department: DepartmentType
  unitUid: String
  unit: UnitType
  sampleTypes: [SampleTypeTyp!]
  categoryUid: String
  category: AnalysisCategoryType
  interims: [AnalysisInterimType!]
  correctionFactors: [AnalysisCorrectionFactorType!]
  specifications: [AnalysisSpecificationType!]
  detectionLimits: [AnalysisDetectionLimitType!]
  uncertainties: [AnalysisUncertaintyType!]
  resultOptions: [ResultOptionType!]
  instruments: [InstrumentType!]
  methods: [MethodType!]
  profiles: [ProfileType!]
  resultType: String
  tatLengthMinutes: Int
  sortKey: Int
  precision: Int
  requiredVerifications: Int
  selfVerification: Boolean
  hidden: Boolean
  internalUse: Boolean
  active: Boolean
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input AnalysisUncertaintyInput {
  min: Float!
  max: Float!
  value: Float!
  analysisUid: String!
  instrumentUid: String!
  methodUid: String!
}

""""""
union AnalysisUncertaintyResponse = AnalysisUncertaintyType | OperationError

type AnalysisUncertaintyType {
  uid: String!
  min: Float!
  max: Float!
  value: Float!
  analysisUid: String!
  instrumentUid: String!
  methodUid: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type AnalysisWithProfiles {
  uid: String!
  name: String!
  description: String
  keyword: String
  departmentUid: String
  department: DepartmentType
  unitUid: String
  unit: UnitType
  sampleTypes: [SampleTypeTyp!]
  categoryUid: String
  category: AnalysisCategoryType
  interims: [AnalysisInterimType!]
  correctionFactors: [AnalysisCorrectionFactorType!]
  specifications: [AnalysisSpecificationType!]
  detectionLimits: [AnalysisDetectionLimitType!]
  uncertainties: [AnalysisUncertaintyType!]
  resultOptions: [ResultOptionType!]
  instruments: [InstrumentType!]
  methods: [MethodType!]
  profiles: [ProfileType!]
  resultType: String
  tatLengthMinutes: Int
  sortKey: Int
  precision: Int
  requiredVerifications: Int
  selfVerification: Boolean
  hidden: Boolean
  internalUse: Boolean
  active: Boolean
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input ApplyVoucherInput {
  voucherCode: String!
  testBillUid: String!
  customerUid: String!
}

type AuditLogType {
  uid: String!
  userUid: String
  targetType: String
  targetUid: String
  action: Int
  stateBefore: JSONScalar
  stateAfter: JSONScalar
  extras: JSONScalar
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type AuthenticatedData {
  user: UserType!
  token: String!
  refresh: String!
  tokenType: String!
  laboratories: [LaboratoryType!]
  activeLaboratory: LaboratoryType
}

""""""
union AuthenticatedDataResponse = AuthenticatedData | OperationError

input BillTransactionInput {
  testBillUid: String!
  kind: String!
  amount: Float!
  notes: String = ""
}

scalar BytesScalar

input CalibrationCertificateInput {
  laboratoryInstrumentUid: String!
  dateIssued: DateTime
  validFromDate: String
  validToDate: String
  certificateCode: String = ""
  issuer: String = ""
  performedBy: String = ""
  approvedBy: String = ""
  remarks: String = ""
  internal: Boolean! = true
}

""""""
union CalibrationCertificateResponse = CalibrationCertificateType | OperationError

type CalibrationCertificateType {
  uid: String!
  laboratoryInstrumentUid: String!
  laboratoryInstrument: LaboratoryInstrumentType
  certificateCode: String!
  internal: Boolean!
  issuer: String!
  dateIssued: DateTime!
  validFromDate: DateTime!
  validToDate: DateTime!
  performedBy: String!
  approvedBy: String!
  remarks: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input ChronicConditionInput {
  icd10Code: String!
  title: String!
  description: String = null
  onsetDate: String = null
  endDate: String = null
  status: String! = "active"
}

type ChronicConditionType {
  icd10Code: String!
  title: String!
  description: String
  onsetDate: String
  endDate: String
  status: String!
}

input ClientContactInputType {
  firstName: String!
  clientUid: String!
  lastName: String = null
  email: String = null
  emailCc: String = null
  mobilePhone: String = null
  consentSms: Boolean = false
  isActive: Boolean! = true
}

""""""
union ClientContactResponse = ClientContactType | OperationError

type ClientContactType {
  uid: String!
  firstName: String
  lastName: String
  email: String
  mobilePhone: String
  businessPhone: String
  isActive: Boolean
  emailCc: String
  consentSms: Boolean!
  clientUid: String!
  client: ClientType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  creatorName: String
  creatorUid: String
  updatedAt: String
  updatorName: String
  updatorUid: String
}

type ClientCursorPage {
  pageInfo: PageInfo!
  edges: [ClientEdge!]
  items: [ClientType!]
  totalCount: Int!
}

type ClientEdge {
  cursor: String!
  node: ClientType!
}

input ClientInputType {
  name: String!
  code: String!
  districtUid: String = null
  email: String = null
  emailCc: String = null
  consentEmail: Boolean = false
  phoneMobile: String = null
  phoneBusiness: String = null
  consentSms: Boolean = false
  internalUse: Boolean = false
  active: Boolean = true
}

""""""
union ClientResponse = ClientType | OperationError

type ClientType {
  uid: String!
  name: String!
  code: String!
  districtUid: String
  district: DistrictType
  provinceUid: String
  province: ProvinceType
  email: String
  emailCc: String
  consentEmail: Boolean!
  phoneMobile: String
  phoneBusiness: String
  consentSms: Boolean!
  internalUse: Boolean!
  active: Boolean!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  contacts: [ClientContactType!]
}

type ClinicalDataCodingType {
  uid: String!
  clinicalDataUid: String
  codingStandardUid: String
  code: String
  name: String
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input ClinicalDataInputType {
  symptoms: [String!] = null
  symptomsRaw: String = ""
  clinicalIndication: String = ""
  pregnancyStatus: Boolean = false
  breastFeeding: Boolean = false
  vitals: JSON = null
  treatmentNotes: String = ""
  otherContext: JSON = null
}

type ClinicalDataType {
  uid: String!
  analysisRequestUid: String
  symptoms: [String!]
  symptomsRaw: String
  clinicalIndication: String
  pregnancyStatus: Boolean
  breastFeeding: Boolean
  vitals: JSONScalar
  treatmentNotes: String
  otherContext: JSONScalar
  codings: [ClinicalDataCodingType!]
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input ClinicalDiagnosisInput {
  patientUid: String!
  icd10Code: String!
  icd10Description: String!
  diagnosisDate: DateTime!
  diagnosisType: String!
  status: String! = "active"
  analysisRequestUid: String = null
  resolutionDate: DateTime = null
  diagnosingProviderUid: String = null
  notes: String = null
  pointer: String = null
}

""""""
union ClinicalDiagnosisResponse = ClinicalDiagnosisType | OperationError

type ClinicalDiagnosisType {
  uid: String!
  patientUid: String!
  analysisRequestUid: String
  icd10Code: String!
  icd10Description: String!
  diagnosisDate: DateTime!
  diagnosisType: String!
  status: String!
  resolutionDate: DateTime
  diagnosingProviderUid: String
  diagnosingProvider: UserType
  notes: String
  pointer: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input CodingStandardInputType {
  name: String!
  description: String = ""
}

""""""
union CodingStandardResponse = CodingStandardType | OperationError

type CodingStandardType {
  uid: String!
  name: String!
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input CountryInputType {
  name: String!
  code: String!
  active: Boolean = true
}

""""""
union CountryResponse = CountryType | OperationError

type CountryType {
  uid: String!
  name: String
  code: String
  active: String
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type CreateQCSetData {
  qcSets: [QCSetWithSamples!]!
}

"""Date with time (isoformat)"""
scalar DateTime

""""""
union DeleteContactResponse = DeletedItem | OperationError

"""Union of possible outcomes when deleting some object"""
union DeleteResponse = DeletedItem | OperationError

type DeletedItem {
  uid: String!
}

input DepartmentInputType {
  name: String!
  description: String = ""
  code: String = ""
}

""""""
union DepartmentResponse = DepartmentType | OperationError

type DepartmentType {
  uid: String!
  name: String
  description: String
  code: String
  laboratoryUid: String
  createdByUid: String
  createdAt: String
  updatedByUid: String
  updatedAt: String
}

type DistrictCursorPage {
  pageInfo: PageInfo!
  edges: [DistrictEdge!]
  items: [DistrictType!]
  totalCount: Int!
}

type DistrictEdge {
  cursor: String!
  node: DistrictType!
}

input DistrictInputType {
  name: String!
  provinceUid: String
  code: String = ""
  email: String = ""
  emailCc: String = ""
  mobilePhone: String = ""
  businessPhone: String = ""
  active: Boolean = true
}

""""""
union DistrictResponse = DistrictType | OperationError

type DistrictType {
  uid: String!
  code: String
  name: String
  email: String
  emailCc: String
  mobilePhone: String
  businessPhone: String
  active: Boolean
  provinceUid: String
  province: ProvinceType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type DocumentAuditCursorPage {
  pageInfo: PageInfo!
  edges: [DocumentAuditEdge!]
  items: [DocumentAuditType!]
  totalCount: Int!
}

type DocumentAuditEdge {
  cursor: String!
  node: DocumentAuditType!
}

input DocumentAuditInputType {
  """Document UID"""
  document: String!

  """Audit action"""
  action: String!

  """Action date"""
  date: DateTime = null

  """IP address"""
  ipAddress: String = null
}

"""Response for document audit operations"""
union DocumentAuditResponse = DocumentAuditType | OperationError

type DocumentAuditType {
  uid: String!
  documentUid: String!
  document: DocumentType!
  action: String!
  date: String!
  userUid: String!
  user: UserType!
  ipAddress: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input DocumentCategoryInputType {
  """Category name"""
  name: String!
}

"""Response for document category operations"""
union DocumentCategoryResponse = DocumentCategoryType | OperationError

type DocumentCategoryType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input DocumentCategoryUpdateInputType {
  """Category name"""
  name: String = null
  uid: String!
}

type DocumentCursorPage {
  pageInfo: PageInfo!
  edges: [DocumentEdge!]
  items: [DocumentType!]
  totalCount: Int!
}

type DocumentEdge {
  cursor: String!
  node: DocumentType!
}

type DocumentFolderCursorPage {
  pageInfo: PageInfo!
  edges: [DocumentFolderEdge!]
  items: [DocumentFolderType!]
  totalCount: Int!
}

type DocumentFolderEdge {
  cursor: String!
  node: DocumentFolderType!
}

input DocumentFolderInputType {
  """Folder name"""
  name: String!

  """Folder description"""
  description: String = null

  """Parent folder UID"""
  parentUid: String = null
}

"""Response for document folder operations"""
union DocumentFolderResponse = DocumentFolderType | OperationError

type DocumentFolderType {
  uid: String!
  name: String!
  description: String
  parentUid: String
  parent: DocumentFolderType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  subfolders: [DocumentFolderType!]!
  documents: [DocumentType!]!
}

input DocumentFolderUpdateInputType {
  """Folder name"""
  name: String = null

  """Folder description"""
  description: String = null

  """Parent folder UID"""
  parentUid: String = null
  uid: String!
}

input DocumentInputType {
  """Document name"""
  name: String!

  """Document subtitle"""
  subtitle: String = null

  """Document ID"""
  documentId: String!

  """Folder UID"""
  folderUid: String = null

  """Department UID"""
  departmentUid: String = null

  """Category UID"""
  categoryUid: String = null

  """Template UID"""
  templateUid: String = null

  """Tag UIDs"""
  tags: [String!] = []

  """Author UIDs"""
  authors: [String!] = []

  """Reader UIDs"""
  readers: [String!] = []

  """Initial version number"""
  initialVersion: String = "1.0"
}

input DocumentRelationInputType {
  """Source document UID"""
  sourceDocument: String!

  """Target document UID"""
  targetDocument: String!

  """Relation type"""
  relationType: String!
}

"""Response for document relation operations"""
union DocumentRelationResponse = DocumentType | OperationError

"""Response for document operations"""
union DocumentResponse = DocumentType | OperationError

type DocumentReviewCycleCursorPage {
  pageInfo: PageInfo!
  edges: [DocumentReviewCycleEdge!]
  items: [DocumentReviewCycleType!]
  totalCount: Int!
}

type DocumentReviewCycleEdge {
  cursor: String!
  node: DocumentReviewCycleType!
}

input DocumentReviewCycleInputType {
  """Document UID"""
  document: String!

  """Start date"""
  startDate: DateTime!

  """End date"""
  endDate: DateTime = null

  """Review cycle status"""
  status: String!

  """Reviewers UIDs"""
  reviewers: [String!] = []
}

"""Response for document review cycle operations"""
union DocumentReviewCycleResponse = DocumentReviewCycleType | OperationError

type DocumentReviewCycleType {
  uid: String!
  documentUid: String!
  document: DocumentType!
  startDate: String!
  endDate: String
  initiatedByUid: String!
  initiatedBy: UserType!
  status: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  steps: [DocumentReviewStepType!]!
}

input DocumentReviewCycleUpdateInputType {
  """Document UID"""
  document: String = null

  """Start date"""
  startDate: DateTime = null

  """End date"""
  endDate: DateTime = null

  """Review cycle status"""
  status: String = null

  """Reviewers UIDs"""
  reviewers: [String!] = []
  uid: String!
}

type DocumentReviewStepCursorPage {
  pageInfo: PageInfo!
  edges: [DocumentReviewStepEdge!]
  items: [DocumentReviewStepType!]
  totalCount: Int!
}

type DocumentReviewStepEdge {
  cursor: String!
  node: DocumentReviewStepType!
}

"""Response for document review step operations"""
union DocumentReviewStepResponse = DocumentReviewStepType | OperationError

type DocumentReviewStepType {
  uid: String!
  reviewCycleUid: String!
  reviewCycle: DocumentReviewCycleType!
  reviewerUid: String!
  reviewer: UserType!
  sequence: Int!
  status: String!
  comments: String
  actionDate: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input DocumentReviewStepUpdateInputType {
  """Review cycle UID"""
  reviewCycle: String = null

  """Reviewer UID"""
  reviewer: String = null

  """Review sequence"""
  sequence: Int = null

  """Review status"""
  status: String = null

  """Review comments"""
  comments: String = null

  """Action date"""
  actionDate: DateTime = null
  uid: String!
}

type DocumentStatusCursorPage {
  pageInfo: PageInfo!
  edges: [DocumentStatusEdge!]
  items: [DocumentStatusType!]
  totalCount: Int!
}

type DocumentStatusEdge {
  cursor: String!
  node: DocumentStatusType!
}

input DocumentStatusInputType {
  """Document UID"""
  document: String!

  """Document status"""
  status: String!

  """Status date"""
  date: DateTime = null
}

"""Response for document status operations"""
union DocumentStatusResponse = DocumentStatusType | OperationError

type DocumentStatusType {
  uid: String!
  documentUid: String!
  document: DocumentType
  status: String!
  date: String!
  userUid: String!
  user: UserType!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input DocumentStatusUpdateInputType {
  """Document UID"""
  document: String = null

  """Document status"""
  status: String = null

  """Status date"""
  date: DateTime = null
  uid: String!
}

type DocumentSubscriptionCursorPage {
  pageInfo: PageInfo!
  edges: [DocumentSubscriptionEdge!]
  items: [DocumentSubscriptionType!]
  totalCount: Int!
}

type DocumentSubscriptionEdge {
  cursor: String!
  node: DocumentSubscriptionType!
}

input DocumentSubscriptionInputType {
  """Document UID"""
  document: String!

  """User UID"""
  user: String!

  """Subscription type"""
  subscriptionType: String!
}

"""Response for document subscription operations"""
union DocumentSubscriptionResponse = DocumentSubscriptionType | OperationError

type DocumentSubscriptionType {
  uid: String!
  documentUid: String!
  document: DocumentType!
  userUid: String!
  user: UserType!
  subscriptionType: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input DocumentSubscriptionUpdateInputType {
  """Document UID"""
  document: String = null

  """User UID"""
  user: String = null

  """Subscription type"""
  subscriptionType: String = null
  uid: String!
}

type DocumentTagCursorPage {
  pageInfo: PageInfo!
  edges: [DocumentTagEdge!]
  items: [DocumentTagType!]
  totalCount: Int!
}

type DocumentTagEdge {
  cursor: String!
  node: DocumentTagType!
}

input DocumentTagInputType {
  """Tag name"""
  name: String!
}

"""Response for document tag operations"""
union DocumentTagResponse = DocumentTagType | OperationError

type DocumentTagType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  documents: [DocumentType!]!
}

input DocumentTagUpdateInputType {
  """Tag name"""
  name: String = null
  uid: String!
}

type DocumentTemplateCursorPage {
  pageInfo: PageInfo!
  edges: [DocumentTemplateEdge!]
  items: [DocumentTemplateType!]
  totalCount: Int!
}

type DocumentTemplateEdge {
  cursor: String!
  node: DocumentTemplateType!
}

input DocumentTemplateInputType {
  """Template name"""
  name: String!

  """Template description"""
  description: String = null

  """Template content"""
  content: String!

  """Category UID"""
  category: String = null
}

"""Response for document template operations"""
union DocumentTemplateResponse = DocumentTemplateType | OperationError

type DocumentTemplateType {
  uid: String!
  name: String!
  description: String
  content: String!
  categoryUid: String
  category: DocumentCategoryType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  documents: [DocumentType!]!
}

input DocumentTemplateUpdateInputType {
  """Template name"""
  name: String = null

  """Template description"""
  description: String = null

  """Template content"""
  content: String = null

  """Category UID"""
  category: String = null
  uid: String!
}

type DocumentType {
  uid: String!
  name: String!
  subtitle: String
  documentId: String!
  folderUid: String
  folder: DocumentFolderType
  departmentUid: String
  department: DepartmentType
  categoryUid: String
  category: DocumentCategoryType
  templateUid: String
  template: DocumentTemplateType
  lastAccessed: String
  lastAccessedByUid: String
  lastAccessedBy: UserType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  tags: [DocumentTagType!]!
  authors: [UserType!]!
  readers: [UserType!]!
  relatedTo: [DocumentType!]!
  relatedFrom: [DocumentType!]!
  versions: [DocumentVersionType!]!
  statuses: [DocumentStatusType!]!
  reviewCycles: [DocumentReviewCycleType!]!
  subscriptions: [DocumentSubscriptionType!]!
  auditRecords: [DocumentAuditType!]!
  latestVersion: DocumentVersionType
  content: String
  editor: String
  status: String
}

input DocumentUpdateInputType {
  uid: String!

  """Document name"""
  name: String = null

  """Document subtitle"""
  subtitle: String = null

  """Document ID"""
  documentId: String = null

  """Folder UID"""
  folderUid: String = null

  """Department UID"""
  departmentUid: String = null

  """Category UID"""
  categoryUid: String = null

  """Tag UIDs"""
  tags: [String!] = []

  """Author UIDs"""
  authors: [String!] = []

  """Reader UIDs"""
  readers: [String!] = []
}

type DocumentVersionCursorPage {
  pageInfo: PageInfo!
  edges: [DocumentVersionEdge!]
  items: [DocumentVersionType!]
  totalCount: Int!
}

type DocumentVersionEdge {
  cursor: String!
  node: DocumentVersionType!
}

input DocumentVersionInputType {
  """Document UID"""
  document: String!

  """Version number"""
  versionNumber: String!

  """Document content"""
  content: String!

  """Change summary"""
  changeSummary: String = null
}

"""Response for document version operations"""
union DocumentVersionResponse = DocumentVersionType | OperationError

type DocumentVersionType {
  uid: String!
  documentUid: String!
  document: DocumentType
  versionNumber: String!
  content: String!
  editor: String!
  thumbnail: String
  changeSummary: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input DocumentVersionUpdateInputType {
  """Document content"""
  content: String!
}

enum ErrandCategory {
  MESSAGE
  ENGAGEMENT
  TICKET
  TODO
  PROJECT
}

type FamilyHistoryType {
  relationship: String!
  condition: String!
  icd10Code: String
  ageAtDiagnosis: Int
}

type FileResponseType {
  uid: String!
  filename: String!
  mimetype: String!
  content: String!
  size: Int!
}

type FileUrlResponseType {
  uid: String!
  filename: String!
  mimetype: String!
  downloadUrl: String!
}

type GrindBoardCursorPage {
  pageInfo: PageInfo!
  edges: [GrindBoardEdge!]
  items: [GrindBoardType!]
  totalCount: Int!
}

type GrindBoardEdge {
  cursor: String!
  node: GrindBoardType!
}

""""""
union GrindBoardResponse = GrindBoardType | OperationError

type GrindBoardType {
  uid: String!
  title: String!
  description: String
  schemeUid: String
  scheme: GrindSchemeType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  posters: [GrindPosterType!]!
}

input GrindCreateBoardInput {
  """Board Title"""
  title: String!

  """Board Description"""
  description: String = null

  """Board Scheme"""
  schemeUid: String = null
}

input GrindCreateErrandDiscussionInput {
  """Comment"""
  comment: String!

  """Errand uid"""
  errandUid: String!

  """Parent comment uid"""
  parentUid: String = null
}

input GrindCreateErrandInput {
  """Errand Category"""
  category: ErrandCategory = null

  """Errand Title"""
  title: String = null

  """Errand Description"""
  description: String = null

  """Errand Milestone"""
  milestones: [String!] = []

  """Assigned To"""
  reporterUid: String = null

  """Assigned To"""
  assigneeUid: String = null

  """Errand Label | Status"""
  labelUid: String = null

  """Errand Stamps | Tags"""
  stamps: [String!] = []

  """Errand Priority"""
  priority: String = null

  """Errand Poster"""
  posterUid: String = null

  """Errand Members"""
  members: [String!] = []

  """Start Date"""
  startDate: DateTime = null

  """End Date"""
  endDate: DateTime = null
}

input GrindCreateLabelInput {
  """Label title"""
  title: String!

  """Label category"""
  category: LabelCategory!
}

input GrindCreateMediaInput {
  """Media target"""
  target: MediaTarget!

  """Media Target ID"""
  targetUid: String!
  file: Upload!
}

input GrindCreateMilestoneInput {
  """Milestone Errand"""
  errandUid: String!

  """Milestone Title"""
  title: String = null

  """Milestone Description"""
  description: String = null

  """Status"""
  complete: Boolean = null

  """Assigned to"""
  assigneeUid: String = null
}

input GrindCreatePosterInput {
  """Poster category"""
  category: PosterCategory!

  """Poster Title"""
  title: String!

  """Poster description"""
  description: String = null

  """Poster Board"""
  boardUid: String = null

  """Poster label"""
  stamps: [String!] = []

  """Assigned To"""
  assigneeUid: String = null

  """Poster Members"""
  members: [String!] = []

  """Poster status"""
  status: String = null
}

input GrindCreateSchemeInput {
  """Scheme Title"""
  title: String!

  """Scheme Description"""
  description: String = null

  """Assigned to"""
  assignee: String = null

  """Scheme Members"""
  members: [String!] = []

  """Start Date"""
  startDate: DateTime = null

  """End Date"""
  endDate: DateTime = null
}

input GrindCreateStampInput {
  """Stamp title"""
  title: String!

  """Stamp category"""
  category: StampCategory!
}

type GrindErrandCursorPage {
  pageInfo: PageInfo!
  edges: [GrindErrandEdge!]
  items: [GrindErrandType!]
  totalCount: Int!
}

""""""
union GrindErrandDiscussionResponse = GrindErrandDiscussionType | OperationError

type GrindErrandDiscussionType {
  uid: String!
  comment: String!
  errandUid: String
  errand: GrindErrandType
  parentUid: String
  parent: GrindErrandDiscussionType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  subdiscussions: [GrindErrandDiscussionType!]!
  canEdit: Boolean!
}

type GrindErrandEdge {
  cursor: String!
  node: GrindErrandType!
}

""""""
union GrindErrandResponse = GrindErrandType | OperationError

type GrindErrandType {
  uid: String!
  category: String
  title: String
  description: String
  labelUid: String
  label: GrindLabelType
  priority: String
  posterUid: String
  poster: GrindPosterType
  reporterUid: String
  reporter: UserType
  assigneeUid: String
  assignee: UserType
  startDate: String
  endDate: String
  progress: Int
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  members: [UserType!]!
  stamps: [GrindStampType!]!
  milestones: [GrindMilestoneType!]!
  milestonesAt: Float!
  occurrences: [GrindOccurrenceType!]!
  media: [GrindMediaType!]!
}

type GrindLabelCursorPage {
  pageInfo: PageInfo!
  edges: [GrindLabelEdge!]
  items: [GrindLabelType!]
  totalCount: Int!
}

type GrindLabelEdge {
  cursor: String!
  node: GrindLabelType!
}

""""""
union GrindLabelResponse = GrindLabelType | OperationError

type GrindLabelType {
  uid: String!
  title: String!
  category: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type GrindMediaCursorPage {
  pageInfo: PageInfo!
  edges: [GrindMediaEdge!]
  items: [GrindMediaType!]
  totalCount: Int!
}

type GrindMediaEdge {
  cursor: String!
  node: GrindMediaType!
}

""""""
union GrindMediaResponse = GrindMediaType | OperationError

type GrindMediaType {
  uid: String!
  target: String
  targetUid: String
  destination: String
  encoding: String
  filename: String
  mimetype: String
  originalName: String
  path: String
  size: String
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type GrindMilestoneCursorPage {
  pageInfo: PageInfo!
  edges: [GrindMilestoneEdge!]
  items: [GrindMilestoneType!]
  totalCount: Int!
}

type GrindMilestoneEdge {
  cursor: String!
  node: GrindMilestoneType!
}

""""""
union GrindMilestoneResponse = GrindMilestoneType | OperationError

type GrindMilestoneType {
  uid: String!
  errandUid: String
  errand: GrindErrandType
  title: String
  description: String
  complete: Boolean
  assigneeUid: String
  assignee: UserType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  occurrences: [GrindOccurrenceType!]!
}

type GrindOccurrenceCursorPage {
  pageInfo: PageInfo!
  edges: [GrindOccurrenceEdge!]
  items: [GrindOccurrenceType!]
  totalCount: Int!
}

type GrindOccurrenceEdge {
  cursor: String!
  node: GrindOccurrenceType!
}

type GrindOccurrenceType {
  uid: String!
  target: String
  targetUid: String
  actorUid: String
  actor: UserType
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type GrindPosterCursorPage {
  pageInfo: PageInfo!
  edges: [GrindPosterEdge!]
  items: [GrindPosterType!]
  totalCount: Int!
}

type GrindPosterEdge {
  cursor: String!
  node: GrindPosterType!
}

""""""
union GrindPosterResponse = GrindPosterType | OperationError

type GrindPosterType {
  uid: String!
  category: String
  title: String
  description: String
  boardUid: String
  board: GrindBoardType
  assigneeUid: String
  assignee: UserType
  status: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  members: [UserType!]!
  stamps: [GrindStampType!]!
  errands: [GrindErrandType!]!
}

type GrindSchemeCursorPage {
  pageInfo: PageInfo!
  edges: [GrindSchemeEdge!]
  items: [GrindSchemeType!]
  totalCount: Int!
}

type GrindSchemeEdge {
  cursor: String!
  node: GrindSchemeType!
}

""""""
union GrindSchemeResponse = GrindSchemeType | OperationError

type GrindSchemeType {
  uid: String!
  title: String!
  description: String
  assigneeUid: String
  assignee: UserType
  startDate: String
  endDate: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  members: [UserType!]!
  boards: [GrindBoardType!]!
}

type GrindStampCursorPage {
  pageInfo: PageInfo!
  edges: [GrindStampEdge!]
  items: [GrindStampType!]
  totalCount: Int!
}

type GrindStampEdge {
  cursor: String!
  node: GrindStampType!
}

""""""
union GrindStampResponse = GrindStampType | OperationError

type GrindStampType {
  uid: String!
  title: String
  category: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input GrindUpdateBoardInput {
  """Board Title"""
  title: String = null

  """Board Description"""
  description: String = null

  """Board Scheme"""
  schemeUid: String = null
}

input GrindUpdateErrandDiscussionInput {
  """Comment"""
  comment: String!

  """Errand uid"""
  errandUid: String!

  """Parent comment uid"""
  parentUid: String = null
}

input GrindUpdateErrandInput {
  """Errand Category"""
  category: ErrandCategory = null

  """Errand Title"""
  title: String = null

  """Errand Description"""
  description: String = null

  """Errand Milestone"""
  milestones: [String!] = []

  """Assigned To"""
  reporterUid: String = null

  """Assigned To"""
  assigneeUid: String = null

  """Errand Label | Status"""
  labelUid: String = null

  """Errand Stamps | Tags"""
  stamps: [String!] = []

  """Errand Priority"""
  priority: String = null

  """Errand Poster"""
  posterUid: String = null

  """Errand Members"""
  members: [String!] = []

  """Start Date"""
  startDate: DateTime = null

  """End Date"""
  endDate: DateTime = null
}

input GrindUpdateLabelInput {
  """Label title"""
  title: String = null

  """Label category"""
  category: String = null
}

input GrindUpdateMilestoneInput {
  """Milestone Errand"""
  errandUid: String!

  """Milestone Title"""
  title: String = null

  """Milestone Description"""
  description: String = null

  """Status"""
  complete: Boolean = null

  """Assigned to"""
  assigneeUid: String = null
}

input GrindUpdatePosterInput {
  """Poster category"""
  category: PosterCategory!

  """Poster Title"""
  title: String!

  """Poster description"""
  description: String = null

  """Poster Board"""
  boardUid: String = null

  """Poster label"""
  stamps: [String!] = []

  """Assigned To"""
  assigneeUid: String = null

  """Poster Members"""
  members: [String!] = []

  """Poster status"""
  status: String = null
}

input GrindUpdateSchemeInput {
  """Scheme Title"""
  title: String = null

  """Scheme Description"""
  description: String = null

  """Assigned to"""
  assignee: String = null

  """Scheme Members"""
  members: [String!] = []

  """Start Date"""
  startDate: DateTime = null

  """End Date"""
  endDate: DateTime = null
}

input GrindUpdateStampInput {
  """Stamp title"""
  title: String = null

  """Stamp category"""
  category: String = null
}

type GroupCount {
  group: String!
  count: Int
}

type GroupData {
  group: String!
  counts: [GroupCount!]
}

input GroupInputType {
  name: String!
  pages: String!
  active: Boolean! = true
}

""""""
union GroupResponse = GroupType | OperationError

type GroupType {
  uid: String!
  name: String
  keyword: String
  members: [UserType!]
  permissions: [PermissionType!]
  active: Boolean
  pages: String
  laboratoryUid: String
  createdByUid: String
  createdBy: GroupType
  createdAt: String
  updatedByUid: String
  updatedBy: GroupType
  updatedAt: String
}

type GroupedCounts {
  data: [GroupCount!]!
}

type GroupedData {
  data: [GroupData!]!
}

input GuarantorInput {
  patientUid: String!
  isPatient: Boolean! = true
  guarantorId: String = null
  firstName: String = null
  lastName: String = null
  dateOfBirth: String = null
  gender: String = null
  relationshipToPatient: String = null
  addressLine1: String = null
  addressLine2: String = null
  city: String = null
  state: String = null
  zipCode: String = null
  phoneHome: String = null
  phoneBusiness: String = null
  phoneMobile: String = null
  email: String = null
  responsibilityPercentage: Int! = 100
}

""""""
union GuarantorResponse = GuarantorType | OperationError

type GuarantorType {
  uid: String!
  patientUid: String!
  isPatient: Boolean!
  guarantorId: String
  firstName: String
  lastName: String
  dateOfBirth: String
  gender: String
  relationshipToPatient: String
  addressLine1: String
  addressLine2: String
  city: String
  state: String
  zipCode: String
  phoneHome: String
  phoneBusiness: String
  phoneMobile: String
  email: String
  responsibilityPercentage: Int!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input HazardInputType {
  name: String!
  description: String!
}

""""""
union HazardResponse = HazardType | OperationError

type HazardType {
  uid: String!
  name: String!
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

""""""
union IdentificationResponse = IdentificationType | OperationError

type IdentificationType {
  uid: String!
  name: String!
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type ImmunizationType {
  vaccine: String!
  epiNumber: String
  date: String
  facility: String
  lotNumber: String
  notes: String
}

input InstrumentCalibrationInput {
  laboratoryInstrumentUid: String!
  dateReported: DateTime
  startDate: String
  endDate: String
  calibrationId: String = ""
  reportId: String = ""
  performedBy: String = ""
  notesBefore: String = ""
  workDone: String = ""
  remarks: String = ""
}

""""""
union InstrumentCalibrationResponse = InstrumentCalibrationType | OperationError

type InstrumentCalibrationType {
  uid: String!
  laboratoryInstrumentUid: String!
  laboratoryInstrument: LaboratoryInstrumentType
  calibrationId: String!
  dateReported: DateTime!
  reportId: String!
  performedBy: String!
  startDate: DateTime!
  endDate: DateTime!
  notesBefore: String!
  workDone: String!
  remarks: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input InstrumentCompetenceInput {
  instrumentUid: String!
  description: String!
  userUid: String!
  issueDate: DateTime!
  expiryDate: DateTime!
  internal: Boolean!
  competence: String!
}

""""""
union InstrumentCompetenceResponse = InstrumentCompetenceType | OperationError

type InstrumentCompetenceType {
  uid: String!
  instrumentUid: String!
  instrument: InstrumentType
  description: String!
  userUid: String!
  user: UserType
  issueDate: DateTime!
  expiryDate: DateTime!
  internal: Boolean!
  competence: BytesScalar
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type InstrumentCursorPage {
  pageInfo: PageInfo!
  edges: [InstrumentEdge!]
  items: [InstrumentType!]
  totalCount: Int!
}

type InstrumentEdge {
  cursor: String!
  node: InstrumentType!
}

input InstrumentInputType {
  name: String!
  keyword: String!
  description: String = ""
  instrumentTypeUid: String = null
  supplierUid: String = null
  manufacturerUid: String = null
}

""""""
union InstrumentResponse = InstrumentType | OperationError

input InstrumentResultExclusionsInput {
  instrumentUid: String!
  result: String!
  reason: String = null
}

""""""
union InstrumentResultExclusionsResponse = InstrumentResultExclusionsType | OperationError

type InstrumentResultExclusionsType {
  uid: String!
  instrumentUid: String!
  instrument: InstrumentType!
  result: String!
  reason: String
}

input InstrumentResultTranslationInput {
  instrumentUid: String!
  original: String!
  translated: String!
  keyword: String!
  reason: String = null
}

""""""
union InstrumentResultTranslationResponse = InstrumentResultTranslationType | OperationError

type InstrumentResultTranslationType {
  uid: String!
  instrumentUid: String!
  instrument: InstrumentType!
  original: String!
  translated: String!
  keyword: String!
  reason: String
}

type InstrumentType {
  uid: String!
  name: String
  description: String
  keyword: String
  supplierUid: String
  supplier: SupplierType
  manufacturerUid: String
  manufacturer: ManufacturerType
  instrumentTypeUid: String
  instrumentType: InstrumentTypeType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  methods: [MethodType!]
  laboratoryInstruments: [LaboratoryInstrumentType!]
}

type InstrumentTypeCursorPage {
  pageInfo: PageInfo!
  edges: [InstrumentTypeEdge!]
  items: [InstrumentTypeType!]
  totalCount: Int!
}

type InstrumentTypeEdge {
  cursor: String!
  node: InstrumentTypeType!
}

input InstrumentTypeInputType {
  name: String!
  description: String = ""
}

""""""
union InstrumentTypeResponse = InstrumentTypeType | OperationError

type InstrumentTypeType {
  uid: String!
  name: String
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input InsuranceCompanyInput {
  name: String!
  code: String = null
  addressLine1: String = null
  addressLine2: String = null
  city: String = null
  state: String = null
  zipCode: String = null
  country: String = null
  phone: String = null
  fax: String = null
  email: String = null
  website: String = null
  claimsAddress: String = null
  electronicPayerId: String = null
  clearinghouse: String = null
  fhirEndpoint: String = null
  apiCredentials: JSONScalar = null
  isActive: Boolean! = true
}

""""""
union InsuranceCompanyResponse = InsuranceCompanyType | OperationError

type InsuranceCompanyType {
  uid: String!
  name: String!
  code: String
  addressLine1: String
  addressLine2: String
  city: String
  state: String
  zipCode: String
  country: String
  phone: String
  fax: String
  email: String
  website: String
  claimsAddress: String
  electronicPayerId: String
  clearinghouse: String
  fhirEndpoint: String
  apiCredentials: JSONScalar
  isActive: Boolean!
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type InsuranceValidationType {
  isValid: Boolean!
  reason: String!
  coverageActive: Boolean!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""json field"""
scalar JSONScalar

enum LabelCategory {
  TICKET
}

input LaboratoryCreateInputType {
  name: String!
  organizationUid: String!
  tagLine: String = ""
  email: String = null
  emailCc: String = null
  mobilePhone: String = null
  businessPhone: String = null
  labManagerUid: String = null
  address: String = null
  banking: String = null
  logo: String = null
  qualityStatement: String = null
  code: String = null
  countryUid: String = null
  provinceUid: String = null
  districtUid: String = null
}

type LaboratoryCursorPage {
  pageInfo: PageInfo!
  edges: [LaboratoryEdge!]
  items: [LaboratoryType!]
  totalCount: Int!
}

type LaboratoryEdge {
  cursor: String!
  node: LaboratoryType!
}

input LaboratoryInputType {
  name: String!
  tagLine: String = ""
  email: String = null
  emailCc: String = null
  mobilePhone: String = null
  businessPhone: String = null
  labManagerUid: String = null
  address: String = null
  banking: String = null
  logo: String = null
  qualityStatement: String = null
  code: String = null
  countryUid: String = null
  provinceUid: String = null
  districtUid: String = null
}

type LaboratoryInstrumentCursorPage {
  pageInfo: PageInfo!
  edges: [LaboratoryInstrumentEdge!]
  items: [LaboratoryInstrumentType!]
  totalCount: Int!
}

type LaboratoryInstrumentEdge {
  cursor: String!
  node: LaboratoryInstrumentType!
}

input LaboratoryInstrumentInputType {
  instrumentUid: String!
  labName: String!
  serialNumber: String = null
  dateCommissioned: DateTime = null
  dateDecommissioned: DateTime = null
}

""""""
union LaboratoryInstrumentResponse = LaboratoryInstrumentType | OperationError

type LaboratoryInstrumentType {
  uid: String!
  instrumentUid: String
  instrument: InstrumentType
  labName: String
  serialNumber: String
  dateCommissioned: DateTime
  dateDecommissioned: DateTime
  laboratoryUid: String
  laboratory: LaboratoryType
  isActive: Boolean!
  isInterfacing: Boolean!
  host: String
  port: String
  autoReconnect: Boolean!
  protocolType: String
  socketType: String
  connection: String
  transmission: String
  syncUnits: Boolean!
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

""""""
union LaboratoryResponse = LaboratoryType | OperationError

input LaboratorySettingInputType {
  laboratoryUid: String!
  allowSelfVerification: Boolean = false
  allowPatientRegistration: Boolean = true
  allowSampleRegistration: Boolean = true
  allowWorksheetCreation: Boolean = true
  defaultRoute: String = null
  passwordLifetime: Int = null
  inactivityLogOut: Int = null
  defaultTheme: String = null
  autoReceiveSamples: Boolean = true
  stickerCopies: Int = 2
  allowBilling: Boolean = false
  allowAutoBilling: Boolean = false
  processBilledOnly: Boolean = false
  minPaymentStatus: PaymentStatus = PARTIAL
  minPartialPerentage: Float = 0.5
  currency: String = "USD"
  paymentTermsDays: Int = 0
}

""""""
union LaboratorySettingResponse = LaboratorySettingType | OperationError

type LaboratorySettingType {
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  uid: String!
  laboratoryUid: String!
  laboratory: LaboratoryType!
  allowSelfVerification: Boolean
  allowPatientRegistration: Boolean
  allowSampleRegistration: Boolean
  allowWorksheetCreation: Boolean
  defaultRoute: String
  passwordLifetime: Int
  defaultTatMinutes: Int
  inactivityLogOut: Int
  defaultTheme: String
  autoReceiveSamples: Boolean
  stickerCopies: Int
  allowAutoBilling: Boolean
  allowBilling: Boolean
  processBilledOnly: Boolean
  minPaymentStatus: PaymentStatus
  minPartialPerentage: Float
  currency: String
  paymentTermsDays: Int
}

type LaboratoryType {
  uid: String!
  name: String!
  organizationUid: String
  organization: OrganizationType
  tagLine: String
  labManagerUid: String
  labManager: UserType
  code: String
  email: String
  emailCc: String
  mobilePhone: String
  businessPhone: String
  address: String
  banking: String
  logo: String
  qualityStatement: String
  countryUid: String
  country: CountryType
  provinceUid: String
  province: ProvinceType
  districtUid: String
  district: DistrictType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  settings: LaboratorySettingType
}

type LaggardCounts {
  lessThanTen: Int
  tenToTwenty: Int
  twentyToThirty: Int
  graterThanThirty: Int
  totalIncomplete: Int
  totalDelayed: Int
  totalNotDelayed: Int
}

type LaggardData {
  category: String!
  counts: LaggardCounts
}

type LaggardStatistics {
  data: [LaggardData!]!
}

input ManageAnalysisInputType {
  cancel: [String!] = null
  add: [String!] = null
}

input ManufacturerInputType {
  name: String!
  description: String = ""
}

""""""
union ManufacturerResponse = ManufacturerType | OperationError

type ManufacturerType {
  uid: String!
  name: String
  description: String
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

enum MediaTarget {
  ERRAND
}

input MedicationInput {
  drug: String!
  dosage: String = null
  frequency: String = null
  route: String = null
  startDate: String = null
  endDate: String = null
  treatmentType: String = null
  prescribingProvider: String = null
  status: String! = "active"
}

type MedicationType {
  drug: String!
  dosage: String
  frequency: String
  route: String
  startDate: String
  endDate: String
  treatmentType: String
  prescribingProvider: String
  status: String!
}

"""Union of possible outcomes when deleting some object"""
union MessageResponse = MessagesType | OperationError

type MessageThreadType {
  uid: String!
  recipients: [UserType!]!
  messages: [MessageType!]
  broadcast: Boolean!
  deletedBy: [UserType!]
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdAt: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type MessageType {
  uid: String!
  threadUid: String!
  thread: MessageThreadType
  body: String!
  viewers: [UserType!]
  deletedBy: [UserType!]
  parentId: String!
  parent: MessageType
  left: Int!
  right: Int!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type MessagesType {
  message: String!
}

type MethodCursorPage {
  pageInfo: PageInfo!
  edges: [MethodEdge!]
  items: [MethodType!]
  totalCount: Int!
}

type MethodEdge {
  cursor: String!
  node: MethodType!
}

input MethodInputType {
  name: String!
  instruments: [String!]
  analyses: [String!]
  keyword: String = null
  description: String = ""
}

""""""
union MethodResponse = MethodType | OperationError

type MethodType {
  uid: String!
  name: String
  description: String
  keyword: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  instruments: [InstrumentType!]
}

type Mutation {
  createUser(firstName: String!, lastName: String!, email: String!, userName: String!, password: String!, passwordc: String!, activeLaboratoryUid: String = null, laboratoryUids: [String!] = null, groupUid: String = null, openReg: Boolean = false): UserResponse!
  updateUser(userUid: String!, firstName: String, lastName: String, userName: String, mobilePhone: String, email: String, groupUid: String, isActive: Boolean, isBlocked: Boolean, activeLaboratoryUid: String = null, laboratoryUids: [String!] = null, password: String = null, passwordc: String = null): UserResponse!
  authenticateUser(username: String!, password: String!): AuthenticatedDataResponse!
  refresh(refreshToken: String!): AuthenticatedDataResponse!
  requestPasswordReset(email: String!): MessageResponse!
  validatePasswordResetToken(token: String!): PasswordResetValidityResponse!
  resetPassword(userUid: String!, password: String!, passwordc: String!): MessageResponse!
  createGroup(payload: GroupInputType!): GroupResponse!
  updateGroup(uid: String!, payload: GroupInputType!): GroupResponse!
  updateGroupPermissions(groupUid: String!, permissionUid: String!): UpdatedGroupPermsResponse!
  assignUserToLaboratory(userUid: String!, laboratoryUid: String!): UserLaboratoryAssignmentResponse!
  removeUserFromLaboratory(userUid: String!, laboratoryUid: String!): UserLaboratoryAssignmentResponse!
  setUserActiveLaboratory(userUid: String!, laboratoryUid: String!): UserResponse!
  uploadProfilePicture(payload: ProfilePictureUploadInputType!): ProfilePictureUploadResponse!
  updateOrganization(uid: String!, payload: OrganizationInputType!): OrganizationResponse!
  updateOrganizationSetting(uid: String!, payload: OrganizationSettingInputType!): OrganizationSettingResponse!
  createLaboratory(payload: LaboratoryCreateInputType!): LaboratoryResponse!
  updateLaboratory(uid: String!, payload: LaboratoryInputType!): LaboratoryResponse!
  updateLaboratoryManager(laboratoryUid: String!, managerUid: String!): LaboratoryResponse!
  updateLaboratorySetting(uid: String!, payload: LaboratorySettingInputType!): LaboratorySettingResponse!
  createDepartment(payload: DepartmentInputType!): DepartmentResponse!
  updateDepartment(uid: String!, payload: DepartmentInputType!): DepartmentResponse!
  createSupplier(payload: SupplierInputType!): SupplierResponse!
  updateSupplier(uid: String!, payload: SupplierInputType!): SupplierResponse!
  createManufacturer(payload: ManufacturerInputType!): ManufacturerResponse!
  updateManufacturer(uid: String!, payload: ManufacturerInputType!): ManufacturerResponse!
  createCountry(payload: CountryInputType!): CountryResponse!
  updateCountry(uid: String!, payload: CountryInputType!): CountryResponse!
  createProvince(payload: ProvinceInputType!): ProvinceResponse!
  updateProvince(uid: String!, payload: ProvinceInputType!): ProvinceResponse!
  createDistrict(payload: DistrictInputType!): DistrictResponse!
  updateDistrict(uid: String!, payload: DistrictInputType!): DistrictResponse!
  createUnit(payload: UnitInputType!): UnitResponse!
  updateUnit(uid: String!, payload: UnitInputType!): UnitResponse!
  createClient(payload: ClientInputType!): ClientResponse! @isAuthenticated @hasPermission
  updateClient(uid: String!, payload: ClientInputType!): ClientResponse! @isAuthenticated @hasPermission
  createClientContact(payload: ClientContactInputType!): ClientContactResponse! @isAuthenticated @hasPermission
  updateClientContact(uid: String!, payload: ClientContactInputType!): ClientContactResponse! @isAuthenticated @hasPermission
  deleteClientContact(uid: String!): DeleteContactResponse! @isAuthenticated @hasPermission
  createIdentification(name: String!): IdentificationResponse! @isAuthenticated @hasPermission
  updateIdentification(uid: String!, name: String!): IdentificationResponse! @isAuthenticated @hasPermission
  createPatient(payload: PatientInputType!): PatientResponse! @isAuthenticated @hasPermission
  updatePatient(uid: String!, payload: PatientInputType!): PatientResponse! @isAuthenticated @hasPermission
  createOrUpdateMedicalHistory(payload: PatientMedicalHistoryInput!): PatientMedicalHistoryResponse! @isAuthenticated @hasPermission
  addChronicCondition(patientUid: String!, condition: ChronicConditionInput!): PatientMedicalHistoryResponse! @isAuthenticated @hasPermission
  removeChronicCondition(patientUid: String!, index: Int!): PatientMedicalHistoryResponse! @isAuthenticated @hasPermission
  addMedication(patientUid: String!, medication: MedicationInput!): PatientMedicalHistoryResponse! @isAuthenticated @hasPermission
  removeMedication(patientUid: String!, index: Int!): PatientMedicalHistoryResponse! @isAuthenticated @hasPermission
  addAllergy(patientUid: String!, allergy: AllergyInput!): PatientMedicalHistoryResponse! @isAuthenticated @hasPermission
  removeAllergy(patientUid: String!, index: Int!): PatientMedicalHistoryResponse! @isAuthenticated @hasPermission
  createInsuranceCompany(payload: InsuranceCompanyInput!): InsuranceCompanyResponse! @isAuthenticated @hasPermission
  updateInsuranceCompany(uid: String!, payload: InsuranceCompanyInput!): InsuranceCompanyResponse! @isAuthenticated @hasPermission
  createPatientInsurance(payload: PatientInsuranceInput!): PatientInsuranceResponse! @isAuthenticated @hasPermission
  updatePatientInsurance(uid: String!, payload: PatientInsuranceInput!): PatientInsuranceResponse! @isAuthenticated @hasPermission
  deletePatientInsurance(uid: String!): Boolean! @isAuthenticated @hasPermission
  createOrUpdateGuarantor(payload: GuarantorInput!): GuarantorResponse! @isAuthenticated @hasPermission
  createClinicalDiagnosis(payload: ClinicalDiagnosisInput!): ClinicalDiagnosisResponse! @isAuthenticated @hasPermission
  updateClinicalDiagnosis(uid: String!, payload: ClinicalDiagnosisInput!): ClinicalDiagnosisResponse! @isAuthenticated @hasPermission
  deleteClinicalDiagnosis(uid: String!): Boolean! @isAuthenticated @hasPermission
  assignDiagnosisPointers(patientUid: String!): [ClinicalDiagnosisType!]! @isAuthenticated @hasPermission
  createCodingStandard(payload: CodingStandardInputType!): CodingStandardResponse!
  updateCodingStandard(uid: String!, payload: CodingStandardInputType!): CodingStandardResponse!
  createSampleType(payload: SampleTypeInputType!): SampleTypeResponse!
  updateSampleType(uid: String!, payload: SampleTypeInputType!): SampleTypeResponse!
  createSampleTypeMapping(payload: SampleTypeMappingInputType!): SampleTypeMappingResponse!
  updateSampleTypeMapping(uid: String!, payload: SampleTypeMappingInputType!): SampleTypeMappingResponse!
  createResultOption(payload: ResultOptionInputType!): ResultOptionResponse!
  updateResultOption(uid: String!, payload: ResultOptionInputType!): ResultOptionResponse!
  createRejectionReason(reason: String!): RejectionReasonResponse!
  updateRejectionReason(uid: String!, reason: String!): RejectionReasonResponse!
  createAnalysisCategory(payload: AnalysisCategoryInputType!): AnalysisCategoryResponse!
  updateAnalysisCategory(uid: String!, payload: AnalysisCategoryInputType!): AnalysisCategoryResponse!
  createProfile(payload: ProfileInputType!): AnalysisProfileResponse!
  updateProfile(uid: String!, payload: ProfileInputType!): AnalysisProfileResponse!
  createAnalysisTemplate(payload: AnalysisTemplateInputType!): AnalysisTemplateResponse!
  updateAnalysisTemplate(uid: String!, payload: AnalysisTemplateInputType!): AnalysisTemplateResponse!
  createProfileMapping(payload: ProfileMappingInputType!): ProfileMappingResponse!
  updateProfileMapping(uid: String!, payload: ProfileMappingInputType!): ProfileMappingResponse!
  createAnalysis(payload: AnalysisInputType!): ProfilesServiceResponse!
  updateAnalysis(uid: String!, payload: AnalysisInputType!): ProfilesServiceResponse!
  createAnalysisMapping(payload: AnalysisMappingInputType!): AnalysisMappingResponse!
  updateAnalysisMapping(uid: String!, payload: AnalysisMappingInputType!): AnalysisMappingResponse!
  createAnalysisRequest(payload: AnalysisRequestInputType!): AnalysisRequestResponse! @isAuthenticated @hasPermission
  createAnalysisInterim(payload: AnalysisInterimInput!): AnalysisInterimResponse!
  updateAnalysisInterim(uid: String!, payload: AnalysisInterimInput!): AnalysisInterimResponse!
  createAnalysisUncertainty(payload: AnalysisUncertaintyInput!): AnalysisUncertaintyResponse!
  updateAnalysisUncertainty(uid: String!, payload: AnalysisUncertaintyInput!): AnalysisUncertaintyResponse!
  createAnalysisCorrectionFactor(payload: AnalysisCorrectionFactorInput!): AnalysisCorrectionFactorResponse!
  updateAnalysisCorrectionFactor(uid: String!, payload: AnalysisCorrectionFactorInput!): AnalysisCorrectionFactorResponse!
  createAnalysisDetectionLimit(payload: AnalysisDetectionLimitInput!): AnalysisDetectionLimitResponse!
  updateAnalysisDetectionLimit(uid: String!, payload: AnalysisDetectionLimitInput!): AnalysisDetectionLimitResponse!
  createAnalysisSpecification(payload: AnalysisSpecificationInput!): AnalysisSpecificationResponse!
  updateAnalysisSpecification(uid: String!, payload: AnalysisSpecificationInput!): AnalysisSpecificationResponse!
  samplesApplyTemplate(uid: String!, analysisTemplateUid: String!): ResultedSampleActionResponse! @isAuthenticated @hasPermission
  manageAnalyses(sampleUid: String!, payload: ManageAnalysisInputType!): ResultedSampleActionResponse! @isAuthenticated @hasPermission
  cloneSamples(samples: [String!]!): SampleActionResponse! @isAuthenticated @hasPermission
  cancelSamples(samples: [String!]!): ResultedSampleActionResponse! @isAuthenticated @hasPermission
  reInstateSamples(samples: [String!]!): ResultedSampleActionResponse! @isAuthenticated @hasPermission
  receiveSamples(samples: [String!]!): ResultedSampleActionResponse! @isAuthenticated @hasPermission
  verifySamples(samples: [String!]!): SampleActionResponse!
  rejectSamples(samples: [SampleRejectInputType!]!): SampleActionResponse! @isAuthenticated @hasPermission
  publishSamples(samples: [SamplePublishInputType!]!): SampleActionResponse! @isAuthenticated @hasPermission
  printSamples(samples: [String!]!): SampleActionResponse! @isAuthenticated @hasPermission
  invalidateSamples(samples: [String!]!): SampleActionResponse! @isAuthenticated @hasPermission
  submitAnalysisResults(analysisResults: [ARResultInputType!]!, sourceObject: String!, sourceObjectUid: String!): AnalysisResultSubmitResponse! @isAuthenticated @hasPermission
  verifyAnalysisResults(analyses: [String!]!, sourceObject: String!, sourceObjectUid: String!): AnalysisResultSubmitResponse!
  retractAnalysisResults(analyses: [String!]!): AnalysisResultResponse! @isAuthenticated @hasPermission
  retestAnalysisResults(analyses: [String!]!): AnalysisResultResponse! @isAuthenticated @hasPermission
  cancelAnalysisResults(analyses: [String!]!): AnalysisResultResponse! @isAuthenticated @hasPermission
  reInstateAnalysisResults(analyses: [String!]!): AnalysisResultResponse! @isAuthenticated @hasPermission
  createQcSet(samples: [QCSetInputType!]!): QCSetResponse!
  createQcLevel(level: String!): QCLevelResponse!
  updateQcLevel(uid: String!, level: String!): QCLevelResponse!
  createQcTemplate(payload: QCTemplateInputType!): QCTemplateResponse!
  updateQcTemplate(uid: String!, payload: QCTemplateInputType!): QCTemplateResponse!
  createWorksheetTemplate(payload: WorksheetTemplateInputType!): WorkSheetTemplateResponse! @isAuthenticated @hasPermission
  updateWorksheetTemplate(uid: String!, payload: WorksheetTemplateInputType!): WorkSheetTemplateResponse! @isAuthenticated @hasPermission
  createWorksheet(templateUid: String!, analystUid: String!, count: Int = 1): WorkSheetsResponse! @isAuthenticated @hasPermission
  updateWorksheet(worksheetUid: String!, analystUid: String = null, instrumentUid: String = null, methodUid: String = null, action: String = null, samples: [String!] = null): WorkSheetResponse! @isAuthenticated @hasPermission
  updateWorksheetApplyTemplate(templateUid: String!, worksheetUid: String!): WorkSheetResponse! @isAuthenticated @hasPermission
  updateWorksheetManualAssign(uid: String!, analysesUids: [String!]!, qcTemplateUid: String = null): WorkSheetResponse! @isAuthenticated @hasPermission
  actionWorksheets(uids: [String!]!, action: String!): WorkSheetsResponse!
  sendMessage(recipients: [String!]!, body: String!): MessageResponse!
  replyMessage(threadUid: String!, body: String!): MessageResponse!
  viewMessage(uid: String!): MessageResponse!
  deleteMessage(uid: String!): DeleteResponse!
  deleteThread(uid: String!): DeleteResponse!
  createNotice(payload: NoticeInputType!): NoticeResponse! @isAuthenticated @hasPermission
  updateNotice(uid: String!, payload: NoticeInputType!): NoticeResponse! @isAuthenticated @hasPermission
  viewNotice(uid: String!, viewer: String!): NoticeType! @isAuthenticated @hasPermission
  deleteNotice(uid: String!): DeleteResponse! @isAuthenticated @hasPermission
  createReflexRule(payload: ReflexRuleInput!): ReflexRuleResponse!
  updateReflexRule(uid: String!, payload: ReflexRuleInput!): ReflexRuleResponse!
  createReflexAction(payload: ReflexActionInput!): ReflexActionResponse!
  updateReflexAction(uid: String!, payload: ReflexActionInput!): ReflexActionResponse!
  createReflexBrain(payload: ReflexBrainInput!): ReflexBrainResponse!
  updateReflexBrain(uid: String!, payload: ReflexBrainInput!): ReflexBrainResponse!
  deleteReflexBrain(uid: String!): DeletedItem!
  createStoreRoom(payload: StoreRoomInputType!): StoreRoomResponse! @isAuthenticated @hasPermission
  updateStoreRoom(uid: String!, payload: StoreRoomInputType!): StoreRoomResponse! @isAuthenticated @hasPermission
  createStorageLocation(payload: StorageLocationInputType!): StorageLocationResponse! @isAuthenticated @hasPermission
  updateStorageLocation(uid: String!, payload: StorageLocationInputType!): StorageLocationResponse! @isAuthenticated @hasPermission
  createStorageSection(payload: StorageSectionInputType!): StorageSectionResponse! @isAuthenticated @hasPermission
  updateStorageSection(uid: String!, payload: StorageSectionInputType!): StorageSectionResponse! @isAuthenticated @hasPermission
  createStorageContainer(payload: StorageContainerInputType!): StorageContainerResponse! @isAuthenticated @hasPermission
  updateStorageContainer(uid: String!, payload: StorageContainerInputType!): StorageContainerResponse! @isAuthenticated @hasPermission
  storeSamples(payload: [StoreSamplesInputType!]!): StoreSampleResponse! @isAuthenticated @hasPermission
  recoverSamples(sampleUids: [String!]!): StoreSampleResponse! @isAuthenticated @hasPermission
  createStockItem(payload: StockItemInputType!): StockItemResponse! @isAuthenticated @hasPermission
  updateStockItem(uid: String!, payload: StockItemInputType!): StockItemResponse! @isAuthenticated @hasPermission
  createStockItemVariant(stockItemUid: String!, payload: StockItemVariantInputType!): StockItemVariantResponse! @isAuthenticated @hasPermission
  updateStockItemVariant(uid: String!, payload: StockItemVariantInputType!): StockItemVariantResponse! @isAuthenticated @hasPermission
  createStockCategory(payload: StockCategoryInputType!): StockCategoryResponse!
  updateStockCategory(uid: String!, payload: StockCategoryInputType!): StockCategoryResponse!
  createHazard(payload: HazardInputType!): HazardResponse!
  updateHazard(uid: String!, payload: HazardInputType!): HazardResponse!
  createStockUnit(payload: StockUnitInputType!): StockUnitResponse!
  updateStockUnit(uid: String!, payload: StockUnitInputType!): StockUnitResponse!
  createStockReceipt(payload: StockReceiptInputType!): StockItemVariantResponse! @isAuthenticated @hasPermission
  createStockOrder(payload: StockOrderInputType!): StockOrderResponse! @isAuthenticated @hasPermission
  updateStockOrder(uid: String!, payload: StockOrderInputType!): StockOrderResponse! @isAuthenticated @hasPermission
  submitStockOrder(uid: String!): StockOrderResponse! @isAuthenticated @hasPermission
  approveStockOrder(uid: String!, payload: StockOrderApprovalInputType!): StockOrderResponse! @isAuthenticated @hasPermission
  issueStockOrder(uid: String!, payload: [StockOrderProductLineInputType!]!): StockOrderResponse! @isAuthenticated @hasPermission
  deleteStockOrder(uid: String!): StockOrderResponse! @isAuthenticated @hasPermission
  createStockAdjustment(payload: StockAdjustmentInputType!): StockAdjustmentResponse! @isAuthenticated @hasPermission
  createInstrumentType(payload: InstrumentTypeInputType!): InstrumentTypeResponse!
  updateInstrumentType(uid: String!, payload: InstrumentTypeInputType!): InstrumentTypeResponse!
  createInstrument(payload: InstrumentInputType!): InstrumentResponse!
  updateInstrument(uid: String!, payload: InstrumentInputType!): InstrumentResponse!
  createInstrumentCompetence(payload: InstrumentCompetenceInput!): InstrumentCompetenceResponse!
  updateInstrumentCompetence(uid: String!, payload: InstrumentInputType!): InstrumentCompetenceResponse!
  createLaboratoryInstrument(payload: LaboratoryInstrumentInputType!): LaboratoryInstrumentResponse!
  updateLaboratoryInstrument(uid: String!, payload: LaboratoryInstrumentInputType!): LaboratoryInstrumentResponse!
  createInstrumentCaliberation(payload: InstrumentCalibrationInput!): InstrumentCalibrationResponse!
  updateInstrumentCaliberation(uid: String!, payload: InstrumentInputType!): InstrumentCalibrationResponse!
  createCaliberationCertificate(payload: CalibrationCertificateInput!): CalibrationCertificateResponse!
  updateCaliberationCertificate(uid: String!, payload: CalibrationCertificateInput!): CalibrationCertificateResponse!
  createMethod(payload: MethodInputType!): MethodResponse!
  updateMethod(uid: String!, payload: MethodInputType!): MethodResponse!
  createInstrumentResultExclusions(payload: InstrumentResultExclusionsInput!): InstrumentResultExclusionsResponse!
  updateInstrumentResultExclusions(uid: String!, payload: InstrumentResultExclusionsInput!): InstrumentResultExclusionsResponse!
  createInstrumentResultTranslation(payload: InstrumentResultTranslationInput!): InstrumentResultTranslationResponse!
  updateInstrumentResultTranslation(uid: String!, payload: InstrumentResultTranslationInput!): InstrumentResultTranslationResponse!
  createShipment(payload: ShipmentInputType!): ShipmentsResponse! @isAuthenticated @hasPermission
  updateShipment(uid: String!, payload: ShipmentUpdateInputType!): ShipmentResponse! @isAuthenticated @hasPermission
  actionShipment(uid: String!, action: String!): ShipmentResponse!
  shipmentManageSamples(uid: String!, payload: ShipmentManageSamplesInput!): ShipmentResponse! @isAuthenticated @hasPermission
  createReferralLaboratory(payload: ReferralLaboratoryInputType!): ReferralLaboratoryResponse!
  updateReferralLaboratory(uid: String!, payload: ReferralLaboratoryInputType!): ReferralLaboratoryResponse!
  updateProfilePrice(uid: String!, payload: PriceInput!): ProfilePriceResponse! @isAuthenticated @hasPermission
  updateAnalysisPrice(uid: String!, payload: PriceInput!): AnalysisPriceResponse! @isAuthenticated @hasPermission
  updateProfileDiscount(uid: String!, payload: PriceDiscountInput!): ProfileDiscountResponse! @isAuthenticated @hasPermission
  updateAnalysisDiscount(uid: String!, payload: PriceDiscountInput!): AnalysisDiscountResponse! @isAuthenticated @hasPermission
  createVoucher(payload: VoucherInput!): VoucherResponse! @isAuthenticated @hasPermission
  updateVoucher(uid: String!, payload: VoucherInput!): VoucherResponse! @isAuthenticated @hasPermission
  createVoucherCode(payload: VoucherCodeInput!): VoucherCodeResponse! @isAuthenticated @hasPermission
  updateVoucherCode(uid: String!, payload: VoucherCodeInput!): VoucherCodeResponse! @isAuthenticated @hasPermission
  createTestBillTransaction(payload: BillTransactionInput!): TestBillTransactionResponse! @isAuthenticated @hasPermission
  confirmTestBillTransaction(uid: String!, notes: String): TestBillTransactionResponse! @isAuthenticated @hasPermission
  applyVoucher(payload: ApplyVoucherInput!): TestBillTransactionResponse! @isAuthenticated @hasPermission
  createAbxGuideline(payload: AbxGuidelineInputType!): AbxGuidelineResponse!
  updateAbxGuideline(uid: String!, payload: AbxGuidelineInputType!): AbxGuidelineResponse!
  createAbxAntibiotic(payload: AbxAntibioticInputType!): AbxAntibioticResponse!
  updateAbxAntibiotic(uid: String!, payload: AbxAntibioticInputType!): AbxAntibioticResponse!
  useAbxAntibiotic(uid: String!): AbxAntibioticResponse!
  discardAbxAntibiotic(uid: String!): DeletedItem!
  createAbxAstPanel(payload: AbxASTPanelInputType!): AbxASTPanelResponse!
  updateAbxAstPanel(uid: String!, payload: AbxASTPanelInputType!): AbxASTPanelResponse!
  createAbxTestMethod(payload: AbxTestMethodInputType!): AbxTestMethodResponse!
  updateAbxTestMethod(uid: String!, payload: AbxTestMethodInputType!): AbxTestMethodResponse!
  createAbxBreakpointType(payload: AbxBreakpointTypeInputType!): AbxBreakpointTypeResponse!
  updateAbxBreakpointType(uid: String!, payload: AbxBreakpointTypeInputType!): AbxBreakpointTypeResponse!
  createAbxHost(payload: AbxHostInputType!): AbxHostResponse!
  updateAbxHost(uid: String!, payload: AbxHostInputType!): AbxHostResponse!
  createAbxSiteOfInfection(payload: AbxSiteOfInfectionInputType!): AbxSiteOfInfectionResponse!
  updateAbxSiteOfInfection(uid: String!, payload: AbxSiteOfInfectionInputType!): AbxSiteOfInfectionResponse!
  createAbxBreakpoint(payload: AbxBreakpointInputType!): AbxBreakpointResponse!
  updateAbxBreakpoint(uid: String!, payload: AbxBreakpointInputType!): AbxBreakpointResponse!
  createAbxMedium(payload: AbxMediumInputType!): AbxMediumResponse!
  updateAbxMedium(uid: String!, payload: AbxMediumInputType!): AbxMediumResponse!
  createAbxQcRange(payload: AbxQCRangeInputType!): AbxQCRangeResponse!
  updateAbxQcRange(uid: String!, payload: AbxQCRangeInputType!): AbxQCRangeResponse!
  createAbxKingdom(payload: AbxKingdomInputType!): AbxKingdomResponse!
  updateAbxKingdom(uid: String!, payload: AbxKingdomInputType!): AbxKingdomResponse!
  createAbxPhylum(payload: AbxPhylumInputType!): AbxPhylumResponse!
  updateAbxPhylum(uid: String!, payload: AbxPhylumInputType!): AbxPhylumResponse!
  createAbxOrder(payload: AbxOrderInputType!): AbxOrderResponse!
  updateAbxOrder(uid: String!, payload: AbxOrderInputType!): AbxOrderResponse!
  createAbxGenus(payload: AbxGenusInputType!): AbxGenusResponse!
  updateAbxGenus(uid: String!, payload: AbxGenusInputType!): AbxGenusResponse!
  createAbxFamily(payload: AbxFamilyInputType!): AbxFamilyResponse!
  updateAbxFamily(uid: String!, payload: AbxFamilyInputType!): AbxFamilyResponse!
  createAbxClass(payload: AbxClassInputType!): AbxClassResponse!
  updateAbxClass(uid: String!, payload: AbxClassInputType!): AbxClassResponse!
  createAbxOrganism(payload: AbxOrganismInputType!): AbxOrganismResponse!
  updateAbxOrganism(uid: String!, payload: AbxOrganismInputType!): AbxOrganismResponse!
  createAbxOrganismSerotype(payload: AbxOrganismSerotypeInputType!): AbxOrganismSerotypeResponse!
  updateAbxOrganismSerotype(uid: String!, payload: AbxOrganismSerotypeInputType!): AbxOrganismSerotypeResponse!
  createAbxOrganismResult(analysisResultUid: String!): AbxOrganismResultType!
  removeAbxOrganismResult(uid: String!): DeleteResponse!
  saveAbxOrganismResult(uid: String!, organismUid: String!): AbxOrganismResultType!
  applyAbxAstPanel(payload: AbxApplyAstPanelInput!): AbxASTResultResponse!
  updateAbxAstResults(payload: AbxASTResultsUpdateInput!): AbxASTResultResponse!
  createAbxExpResPhenotype(payload: AbxExpResPhenotypeInputType!): AbxExpResPhenotypeResponse!
  updateAbxExpResPhenotype(uid: String!, payload: AbxExpResPhenotypeInputType!): AbxExpResPhenotypeResponse!
  createAbxExpertInterpretationRule(payload: AbxExpertInterpretationRuleInputType!): AbxExpertInterpretationRuleResponse!
  updateAbxExpertInterpretationRule(uid: String!, payload: AbxExpertInterpretationRuleInputType!): AbxExpertInterpretationRuleResponse!
  createGrindScheme(payload: GrindCreateSchemeInput!): GrindSchemeResponse! @isAuthenticated @hasPermission
  updateGrindScheme(uid: String!, payload: GrindUpdateSchemeInput!): GrindSchemeResponse! @isAuthenticated @hasPermission
  deleteGrindScheme(uid: String!): DeleteResponse! @isAuthenticated @hasPermission
  createGrindBoard(payload: GrindCreateBoardInput!): GrindBoardResponse!
  updateGrindBoard(uid: String!, payload: GrindUpdateBoardInput!): GrindBoardResponse!
  deleteGrindBoard(uid: String!): DeleteResponse!
  createGrindPoster(payload: GrindCreatePosterInput!): GrindPosterResponse!
  updateGrindPoster(uid: String!, payload: GrindUpdatePosterInput!): GrindPosterResponse!
  deleteGrindPoster(uid: String!): DeleteResponse!
  createGrindErrand(payload: GrindCreateErrandInput!): GrindErrandResponse!
  updateGrindErrand(uid: String!, payload: GrindUpdateErrandInput!): GrindErrandResponse!
  deleteGrindErrand(uid: String!): DeleteResponse!
  createGrindLabel(payload: GrindCreateLabelInput!): GrindLabelResponse!
  updateGrindLabel(uid: String!, payload: GrindUpdateLabelInput!): GrindLabelResponse!
  deleteGrindLabel(uid: String!): DeleteResponse!
  createGrindMedia(payload: GrindCreateMediaInput!): GrindMediaResponse!
  deleteGrindMedia(uid: String!): DeleteResponse!
  createGrindMilestone(payload: GrindCreateMilestoneInput!): GrindMilestoneResponse!
  updateGrindMilestone(uid: String!, payload: GrindUpdateMilestoneInput!): GrindMilestoneResponse!
  deleteGrindMilestone(uid: String!): DeleteResponse!
  createGrindStamp(payload: GrindCreateStampInput!): GrindStampResponse!
  updateGrindStamp(uid: String!, payload: GrindUpdateStampInput!): GrindStampResponse!
  deleteGrindStamp(uid: String!): DeleteResponse!
  createGrindErrandDiscussion(payload: GrindCreateErrandDiscussionInput!): GrindErrandDiscussionResponse!
  updateGrindErrandDiscussion(uid: String!, payload: GrindUpdateErrandDiscussionInput!): GrindErrandDiscussionResponse!
  createDocumentCategory(payload: DocumentCategoryInputType!): DocumentCategoryResponse!
  updateDocumentCategory(uid: String!, payload: DocumentCategoryUpdateInputType!): DocumentCategoryResponse!
  deleteDocumentCategory(uid: String!): DocumentCategoryResponse!
  createDocumentTag(payload: DocumentTagInputType!): DocumentTagResponse!
  updateDocumentTag(uid: String!, payload: DocumentTagUpdateInputType!): DocumentTagResponse!
  deleteDocumentTag(uid: String!): DocumentTagResponse!
  createDocumentFolder(payload: DocumentFolderInputType!): DocumentFolderResponse! @isAuthenticated @hasPermission
  updateDocumentFolder(uid: String!, payload: DocumentFolderUpdateInputType!): DocumentFolderResponse! @isAuthenticated @hasPermission
  deleteDocumentFolder(uid: String!): DocumentFolderResponse! @isAuthenticated @hasPermission
  createDocumentTemplate(payload: DocumentTemplateInputType!): DocumentTemplateResponse! @isAuthenticated @hasPermission
  updateDocumentTemplate(uid: String!, payload: DocumentTemplateUpdateInputType!): DocumentTemplateResponse! @isAuthenticated @hasPermission
  deleteDocumentTemplate(uid: String!): DocumentTemplateResponse! @isAuthenticated @hasPermission
  createDocument(payload: DocumentInputType!): DocumentResponse! @isAuthenticated @hasPermission
  updateDocument(uid: String!, payload: DocumentUpdateInputType!): DocumentResponse! @isAuthenticated @hasPermission
  deleteDocument(uid: String!): DocumentResponse! @isAuthenticated @hasPermission
  createDocumentVersion(payload: DocumentVersionInputType!): DocumentVersionResponse! @isAuthenticated @hasPermission
  updateDocumentVersion(uid: String!, payload: DocumentVersionUpdateInputType!): DocumentVersionResponse! @isAuthenticated @hasPermission
  deleteDocumentVersion(uid: String!): DocumentVersionResponse! @isAuthenticated @hasPermission
  createDocumentStatus(payload: DocumentStatusInputType!): DocumentStatusResponse!
  updateDocumentStatus(uid: String!, payload: DocumentStatusUpdateInputType!): DocumentStatusResponse!
  createDocumentReviewCycle(payload: DocumentReviewCycleInputType!): DocumentReviewCycleResponse! @isAuthenticated @hasPermission
  updateDocumentReviewCycle(uid: String!, payload: DocumentReviewCycleUpdateInputType!): DocumentReviewCycleResponse! @isAuthenticated @hasPermission
  deleteDocumentReviewCycle(uid: String!): DocumentReviewCycleResponse! @isAuthenticated @hasPermission
  updateDocumentReviewStep(uid: String!, payload: DocumentReviewStepUpdateInputType!): DocumentReviewStepResponse! @isAuthenticated @hasPermission
  createDocumentSubscription(payload: DocumentSubscriptionInputType!): DocumentSubscriptionResponse!
  updateDocumentSubscription(uid: String!, payload: DocumentSubscriptionUpdateInputType!): DocumentSubscriptionResponse!
  deleteDocumentSubscription(uid: String!): DocumentSubscriptionResponse!
  createDocumentAudit(payload: DocumentAuditInputType!): DocumentAuditResponse!
  createDocumentRelation(payload: DocumentRelationInputType!): DocumentRelationResponse!
  deleteDocumentRelation(payload: DocumentRelationInputType!): DocumentRelationResponse!
  createSmsTemplate(payload: SmsTemplateInputType!): SmsTemplateResponse!
  updateSmsTemplate(uid: String!, payload: SmsTemplateInputType!): SmsTemplateResponse!
  deleteSmsTemplate(uid: String!): OperationErrorDeletedItem!
}

type Nothing {
  data: String
}

input NoticeInputType {
  title: String!
  body: String!
  expiry: String!
  groups: [String!]
  departments: [String!]
}

"""Union of possible outcomes when adding a new notice"""
union NoticeResponse = NoticeType | OperationError

type NoticeType {
  uid: String!
  departments: [DepartmentType!]
  groups: [GroupType!]
  title: String!
  body: String!
  viewers: [UserType!]
  expiry: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

enum NotificationObjectType {
  SAMPLE
  ANALYSIS_RESULT
  WORKSHEET
  REPORT
  SHIPMENT
}

type NotificationType {
  uid: String!
  departments: DepartmentType
  groups: GroupType
  users: UserType
  message: String!
  viewers: UserType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
}

type OperationError {
  error: String!
  suggestion: String
}

union OperationErrorDeletedItem = OperationError | DeletedItem

type OperationSuccess {
  message: String!
}

input OrganizationInputType {
  name: String = ""
  tagLine: String = ""
  email: String = null
  emailCc: String = null
  mobilePhone: String = null
  businessPhone: String = null
  labManagerUid: String = null
  address: String = null
  banking: String = null
  logo: String = null
  qualityStatement: String = null
  code: String = null
  countryUid: String = null
  provinceUid: String = null
  districtUid: String = null
}

""""""
union OrganizationResponse = OrganizationType | OperationError

input OrganizationSettingInputType {
  passwordLifetime: Int = null
  inactivityLogOut: Int = null
  allowBilling: Boolean = false
  allowAutoBilling: Boolean = false
  processBilledOnly: Boolean = false
  minPaymentStatus: PaymentStatus = PARTIAL
  minPartialPerentage: Float = 0.5
  currency: String = "USD"
  paymentTermsDays: Int = 0
}

""""""
union OrganizationSettingResponse = OrganizationSettingType | OperationError

type OrganizationSettingType {
  uid: String!
  organizationUid: String
  organization: OrganizationType
  passwordLifetime: Int
  inactivityLogOut: Int
  allowAutoBilling: Boolean
  allowBilling: Boolean
  processBilledOnly: Boolean
  minPaymentStatus: PaymentStatus
  minPartialPerentage: Float
  currency: String
  paymentTermsDays: Int
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type OrganizationType {
  uid: String!
  name: String!
  setupName: String!
  tagLine: String
  timezone: String
  code: String
  email: String
  emailCc: String
  mobilePhone: String
  businessPhone: String
  address: String
  banking: String
  logo: String
  qualityStatement: String
  countryUid: String
  country: CountryType
  provinceUid: String
  province: ProvinceType
  districtUid: String
  district: DistrictType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  settings: OrganizationSettingType!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

""""""
union PasswordResetValidityResponse = PasswordResetValidityType | OperationError

type PasswordResetValidityType {
  username: String!
  authUid: String!
}

type PatientCursorPage {
  pageInfo: PageInfo!
  edges: [PatientEdge!]
  items: [PatientType!]
  totalCount: Int!
}

type PatientEdge {
  cursor: String!
  node: PatientType!
}

type PatientIdentificationType {
  uid: String!
  patientUid: String!
  identificationUid: String!
  identification: IdentificationType
  value: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input PatientInputType {
  clientPatientId: String!
  firstName: String!
  lastName: String!
  clientUid: String!
  gender: String!
  middleName: String = null
  age: Int = null
  dateOfBirth: DateTime = null
  ageDobEstimated: Boolean = false
  phoneMobile: String = null
  phoneHome: String = null
  consentSms: Boolean = false
  internalUse: Boolean = false
  countryUid: String = null
  provinceUid: String = null
  districtUid: String = null
  identifications: [PatientidentificationInput!]
}

input PatientInsuranceInput {
  patientUid: String!
  priority: String!
  insuranceCompanyUid: String!
  policyNumber: String!
  groupNumber: String = null
  planName: String = null
  subscriberIsPatient: Boolean! = true
  subscriberFirstName: String = null
  subscriberLastName: String = null
  subscriberDob: String = null
  subscriberGender: String = null
  subscriberId: String = null
  relationshipToPatient: String = null
  effectiveDate: DateTime = null
  terminationDate: DateTime = null
  copayAmount: Float = null
  deductibleAmount: Float = null
  invoiceToInsurance: Boolean! = true
  requiresAuthorization: Boolean! = false
  authorizationNumber: String = null
  isActive: Boolean! = true
}

""""""
union PatientInsuranceResponse = PatientInsuranceType | OperationError

type PatientInsuranceType {
  uid: String!
  patientUid: String!
  priority: String!
  isActive: Boolean!
  insuranceCompanyUid: String
  insuranceCompany: InsuranceCompanyType
  policyNumber: String
  groupNumber: String
  planName: String
  subscriberIsPatient: Boolean!
  subscriberFirstName: String
  subscriberLastName: String
  subscriberDob: String
  subscriberGender: String
  subscriberId: String
  relationshipToPatient: String
  effectiveDate: DateTime
  terminationDate: DateTime
  copayAmount: Float
  deductibleAmount: Float
  invoiceToInsurance: Boolean!
  requiresAuthorization: Boolean!
  authorizationNumber: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input PatientMedicalHistoryInput {
  patientUid: String!
  menstrualStatus: String = null
  pregnancyStatus: Boolean = null
  pregnancyDueDate: String = null
  smokingStatus: String = null
  alcoholUse: String = null
  drugUse: String = null
  occupation: String = null
  notes: String = null
}

""""""
union PatientMedicalHistoryResponse = PatientMedicalHistoryType | OperationError

type PatientMedicalHistoryType {
  uid: String!
  patientUid: String!
  chronicConditions: [ChronicConditionType!]
  treatmentHistory: [MedicationType!]
  allergies: [AllergyType!]
  immunizations: [ImmunizationType!]
  travelHistory: [TravelHistoryType!]
  familyHistory: [FamilyHistoryType!]
  surgicalHistory: [SurgicalHistoryType!]
  menstrualStatus: String
  pregnancyStatus: Boolean
  pregnancyDueDate: String
  smokingStatus: String
  alcoholUse: String
  drugUse: String
  occupation: String
  notes: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

""""""
union PatientResponse = PatientType | OperationError

type PatientType {
  uid: String!
  clientPatientId: String!
  patientId: String!
  clientUid: String!
  firstName: String
  middleName: String
  lastName: String
  gender: String
  age: Int
  dateOfBirth: DateTime
  ageDobEstimated: Boolean!
  phoneMobile: String
  phoneHome: String
  consentSms: Boolean!
  email: String
  internalUse: Boolean!
  active: Boolean!
  districtUid: String
  provinceUid: String
  countryUid: String
  identifications: [PatientIdentificationType!]
  metadataSnapshot: JSONScalar
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  client: ClientType
  district: DistrictType
  province: ProvinceType
  country: CountryType
}

input PatientidentificationInput {
  value: String!
  identificationUid: String!
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
}

type PermissionType {
  uid: String!
  action: String
  target: String
  active: Boolean
  createdByUid: String
  createdBy: PermissionType
  createdAt: String
  updatedByUid: String
  updatedBy: PermissionType
  updatedAt: String
}

type PermissionUsageSummaryType {
  permission: PermissionType!
  globalGroups: [GroupType!]!
  totalGroups: Int!
}

enum PosterCategory {
  LISTING
  ENGAGEMENT
  TODO
  MESSAGE
}

input PriceDiscountInput {
  discountType: String!
  valueType: String = null
  startDate: DateTime!
  endDate: DateTime!
  voucherUid: String = null
  valuePercent: Float = null
  valueAmount: Float = null
  isActive: Boolean!
}

input PriceInput {
  amount: Float!
  isActive: Boolean = true
}

type ProcessCounts {
  totalSamples: Int
  totalLate: Int
  totalNotLate: Int
  processAverage: Int
  avgExtraDays: Int
  service: String
}

type ProcessData {
  process: String!
  counts: ProcessCounts
  groups: [ProcessCounts!]
}

type ProcessStatistics {
  data: [ProcessData!]!
}

""""""
union ProfileDiscountResponse = ProfileDiscountType | OperationError

type ProfileDiscountType {
  uid: String!
  profileUid: String!
  profile: ProfileType!
  name: String!
  discountType: String!
  valueType: String!
  startDate: DateTime!
  endDate: DateTime!
  voucherUid: String
  voucher: VoucherType
  valuePercent: Float!
  valueAmount: Float!
  isActive: Boolean!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input ProfileInputType {
  name: String!
  description: String! = ""
  departmentUid: String = null
  sampleTypes: [String!]
  services: [String!]
  keyword: String = null
  active: Boolean = true
}

input ProfileMappingInputType {
  profileUid: String!
  codingStandardUid: String!
  name: String!
  code: String!
  description: String = null
}

"""Union of possible outcomes when adding a new notice"""
union ProfileMappingResponse = ProfileMappingType | OperationError

type ProfileMappingType {
  uid: String!
  profileUid: String!
  profile: ProfileType
  codingStandardUid: String!
  codingStandard: CodingStandardType
  name: String
  description: String
  code: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input ProfilePictureUploadInputType {
  userUid: String!
  imageData: String!
  fileName: String!
  contentType: String!
}

""""""
union ProfilePictureUploadResponse = ProfilePictureUploadResultType | OperationError

type ProfilePictureUploadResultType {
  user: UserType!
  profilePictureUrl: String!
  message: String!
}

""""""
union ProfilePriceResponse = ProfilePriceType | OperationError

type ProfilePriceType {
  uid: String!
  profileUid: String!
  profile: ProfileType!
  isActive: Boolean!
  amount: Float!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type ProfileType {
  uid: String!
  name: String!
  description: String
  keyword: String
  departmentUid: String
  department: DepartmentType
  tatLengthMinutes: Int
  analyses: [AnalysisType!]
  sampleTypes: [SampleTypeTyp!]
  active: Boolean!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

""""""
union ProfilesServiceResponse = AnalysisWithProfiles | OperationError

type ProvinceCursorPage {
  pageInfo: PageInfo!
  edges: [ProvinceEdge!]
  items: [ProvinceType!]
  totalCount: Int!
}

type ProvinceEdge {
  cursor: String!
  node: ProvinceType!
}

input ProvinceInputType {
  name: String
  countryUid: String
  code: String = ""
  email: String = ""
  emailCc: String = ""
  mobilePhone: String = ""
  businessPhone: String = ""
  active: Boolean = true
}

""""""
union ProvinceResponse = ProvinceType | OperationError

type ProvinceType {
  uid: String!
  code: String
  name: String
  email: String
  emailCc: String
  mobilePhone: String
  businessPhone: String
  active: Boolean
  countryUid: String
  country: CountryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

""""""
union QCLevelResponse = QCLevelType | OperationError

type QCLevelType {
  uid: String!
  level: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type QCSetCursorPage {
  pageInfo: PageInfo!
  edges: [QCSetEdge!]
  items: [QCSetWithSamples!]
  totalCount: Int!
}

type QCSetEdge {
  cursor: String!
  node: QCSetWithSamples!
}

input QCSetInputType {
  qcTemplateUid: String = null
  qcLevels: [String!]!
  analysisProfiles: [String!]!
  analysisServices: [String!]!
}

""""""
union QCSetResponse = CreateQCSetData | OperationError

type QCSetType {
  uid: String!
  name: String!
  note: String!
  status: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type QCSetWithSamples {
  uid: String!
  name: String!
  note: String!
  status: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  samples: [SamplesWithResults!]
}

input QCTemplateInputType {
  name: String!
  description: String! = ""
  departments: [String!] = null
  levels: [String!] = null
}

""""""
union QCTemplateResponse = QCTemplateType | OperationError

type QCTemplateType {
  uid: String!
  name: String!
  description: String
  departments: [DepartmentType!]!
  qcLevels: [QCLevelType!]!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type Query {
  laboratoryAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, organizationUid: String = null, sortBy: [String!] = null): LaboratoryCursorPage!
  manufacturerAll: [ManufacturerType!]!
  supplierAll: [SupplierType!]!
  departmentAll: [DepartmentType!]!
  districtAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): DistrictCursorPage!
  provinceAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): ProvinceCursorPage!
  countryAll: [CountryType!]!
  unitAll: [UnitType!]!
  organization: OrganizationType!
  laboratory: LaboratoryType!
  laboratoryByUid(uid: String!): LaboratoryType!
  laboratorySettingByLaboratoryUid(uid: String!): LaboratorySettingType!
  laboratoriesByOrganization(organizationUid: String!): [LaboratoryType!]!
  laboratorySearch(text: String!, limit: Int! = 10): [LaboratoryType!]!
  manufacturerByUid(uid: String!): ManufacturerType!
  supplierByUid(uid: String!): SupplierType!
  departmentByUid(uid: String!): DepartmentType!
  districtByUid(uid: String!): DistrictType!
  districtsByProvinceUid(uid: String!): [DistrictType!]!
  provinceByUid(uid: String!): ProvinceType!
  provincesByCountryUid(uid: String!): [ProvinceType!]!
  countryByUid(uid: String!): CountryType!
  unitByUid(uid: String!): UnitType!
  auditLogsFilter(targetType: String!, targetUid: String!): [AuditLogType!]
  userAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, laboratoryUid: String = null, sortBy: [String!] = null): UserCursorPage!
  userMe(token: String!): UserType
  userByEmail(email: String!): UserType
  groupAll(laboratoryUid: String = null): [GroupType!]!
  groupByUid(uid: String!): GroupType
  groupsByLaboratory(laboratoryUid: String = null): [GroupType!]!
  groupByName(name: String!, laboratoryUid: String = null): GroupType
  groupSearch(text: String!, laboratoryUid: String = null, limit: Int! = 10): [GroupType!]!
  groupsWithPermission(permissionUid: String!, laboratoryUid: String = null): [GroupType!]!
  permissionAll: [PermissionType!]!
  permissionByUid(uid: String!): PermissionType
  permissionsByAction(action: String!): [PermissionType!]!
  permissionsByTarget(target: String!): [PermissionType!]!
  permissionsByActionTarget(action: String!, target: String!): [PermissionType!]!
  permissionSearch(text: String!, limit: Int! = 10): [PermissionType!]!
  permissionUsageSummary(permissionUid: String!): PermissionUsageSummaryType!
  usersByLaboratory(laboratoryUid: String!): [UserType!]!
  userLaboratories(userUid: String!): [String!]!
  userAccessSummary(userUid: String!): UserAccessSummaryType!
  userSearch(text: String!, laboratoryUid: String = null, limit: Int! = 10): [UserType!]!
  userByEmailOrUsername(identifier: String!): UserType
  userByUid(uid: String!): UserType
  clientAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): ClientCursorPage! @isAuthenticated @hasPermission
  clientByUid(uid: String!): ClientType! @isAuthenticated @hasPermission
  clientByCode(code: String!): ClientType! @isAuthenticated @hasPermission
  clientsByName(name: String!): [ClientType!]! @isAuthenticated @hasPermission
  clientSearch(queryString: String!): [ClientType!]! @isAuthenticated @hasPermission
  clientContactAll: [ClientContactType!]! @isAuthenticated @hasPermission
  clientContactUid(uid: String!): ClientContactType! @isAuthenticated @hasPermission
  clientContactByClientUid(clientUid: String!): [ClientContactType!]! @isAuthenticated @hasPermission
  patientAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): PatientCursorPage! @isAuthenticated @hasPermission
  patientByUid(uid: String!): PatientType @isAuthenticated @hasPermission
  patientByPatientId(patientId: String!): PatientType @isAuthenticated @hasPermission
  patientSearch(queryString: String!): [PatientType!]! @isAuthenticated @hasPermission
  identificationAll: [IdentificationType!]! @isAuthenticated @hasPermission
  identificationByUid(uid: String!): IdentificationType! @isAuthenticated @hasPermission
  patientMedicalHistory(patientUid: String!): PatientMedicalHistoryType @isAuthenticated @hasPermission
  activeMedications(patientUid: String!): [MedicationType!]! @isAuthenticated @hasPermission
  verifiedAllergies(patientUid: String!): [AllergyType!]! @isAuthenticated @hasPermission
  patientInsurance(patientUid: String!, activeOnly: Boolean! = true): [PatientInsuranceType!]! @isAuthenticated @hasPermission
  primaryInsurance(patientUid: String!): PatientInsuranceType @isAuthenticated @hasPermission
  validateInsurance(insuranceUid: String!): InsuranceValidationType! @isAuthenticated @hasPermission
  insuranceCompanies(activeOnly: Boolean! = true): [InsuranceCompanyType!]! @isAuthenticated @hasPermission
  patientGuarantor(patientUid: String!): GuarantorType @isAuthenticated @hasPermission
  patientDiagnoses(patientUid: String!, activeOnly: Boolean! = true): [ClinicalDiagnosisType!]! @isAuthenticated @hasPermission
  primaryDiagnosis(patientUid: String!): ClinicalDiagnosisType @isAuthenticated @hasPermission
  diagnosisForAnalysisRequest(analysisRequestUid: String!): [ClinicalDiagnosisType!]! @isAuthenticated @hasPermission
  codingStandardAll: [CodingStandardType!]!
  sampleTypeAll: [SampleTypeTyp!]!
  sampleTypeByUid(uid: String!): SampleTypeTyp!
  sampleTypeMappingsBySampleType(sampleTypeUid: String!): [SampleTypeMappingType!]!
  sampleAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, status: String = null, clientUid: String = null, sortBy: [String!] = null): SampleCursorPage! @isAuthenticated @hasPermission
  samplesForShipmentAssign(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null, analysisUid: String = null, sampleTypeUid: String = null): SampleCursorPage! @isAuthenticated @hasPermission
  sampleSearch(status: String!, text: String!, clientUid: String!): [SampleType!]! @isAuthenticated @hasPermission
  sampleCount(status: String!, text: String!, clientUid: String!): Int! @isAuthenticated @hasPermission
  sampleByUid(uid: String!): SampleType! @isAuthenticated @hasPermission
  sampleByParentId(parentId: String!, text: String = null): [SampleType!]! @isAuthenticated @hasPermission
  samplesByUids(sampleUids: [String!]!): [SamplesWithResults!]! @isAuthenticated @hasPermission
  samplesByStorageContainerUid(uid: String!): [SampleType!]! @isAuthenticated @hasPermission
  profileAll: [ProfileType!]!
  profileByUid(uid: String!): ProfileType!
  profileMappingsByProfile(profileUid: String!): [ProfileMappingType!]!
  analysisCategoryAll: [AnalysisCategoryType!]!
  analysisCategoryByUid(uid: String!): AnalysisCategoryType!
  analysisTemplateAll: [AnalysisTemplateType!]!
  analysisTemplateByUid(uid: String!): AnalysisTemplateType!
  analysisAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null, qcOnly: Boolean = false): AnalysisCursorPage!
  analysisByUid(uid: String!): AnalysisType!
  analysisMappingsByAnalysis(analysisUid: String!): [AnalysisMappingType!]!
  analysisWithoutProfile: [AnalysisType!]!
  analysisRequestAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): AnalysisRequestCursorPage! @isAuthenticated @hasPermission
  analysisRequestByUid(uid: String!): AnalysisRequestWithSamples! @isAuthenticated @hasPermission
  analysisRequestsByPatientUid(uid: String!): [AnalysisRequestWithSamples!]! @isAuthenticated @hasPermission
  analysisRequestsByClientUid(uid: String!): [AnalysisRequestWithSamples!]! @isAuthenticated @hasPermission
  analysisResultByUid(uid: String!): AnalysisResultType! @isAuthenticated @hasPermission
  analysisResultBySampleUid(uid: String!): [AnalysisResultType!]! @isAuthenticated @hasPermission
  analysisResultsForWsAssign(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null, analysisUid: String = null, sampleTypeUid: String = null): AnalysisResultCursorPage! @isAuthenticated @hasPermission
  analysisInterimAll: [AnalysisInterimType!]!
  analysisInterimByUid(uid: String!): AnalysisInterimType!
  analysisCorrectionFactorAll: [AnalysisCorrectionFactorType!]!
  analysisCorrectionFactorByUid(uid: String!): AnalysisCorrectionFactorType!
  analysisUncertaintyAll: [AnalysisUncertaintyType!]!
  analysisUncertaintyByUid(uid: String!): AnalysisUncertaintyType!
  analysisDetectionLimitAll: [AnalysisDetectionLimitType!]!
  analysisDetectionLimitByUid(uid: String!): AnalysisDetectionLimitType!
  analysisSpecificationAll: [AnalysisSpecificationType!]!
  analysisSpecificationUid(uid: String!): AnalysisSpecificationType!
  qcSetAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, status: String = null, sortBy: [String!]! = ["-uid"]): QCSetCursorPage! @isAuthenticated @hasPermission
  qcSetByUid(uid: String!): QCSetWithSamples! @isAuthenticated @hasPermission
  qcLevelAll: [QCLevelType!]!
  qcLevelByUid(uid: String!): QCLevelType!
  qcTemplateAll: [QCTemplateType!]!
  qcTemplateByUid(uid: String!): QCTemplateType!
  resultOptionsByAnalysisUid(uid: String!): [ResultOptionType!]!
  rejectionReasonsAll: [RejectionReasonType!]!
  rejectionReasonByUid(uid: String!): RejectionReasonType!
  resultMutationByResultUid(resultUid: String!): ResultMutationType @isAuthenticated @hasPermission
  qcChartData(analyses: [String!]!, month: Int!, year: Int!): [AnalysisResultType!]! @isAuthenticated @hasPermission
  worksheetAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, status: String = null, sortBy: [String!] = null): WorkSheetCursorPage! @isAuthenticated @hasPermission
  worksheetByAnalyst(analystUid: String!): [WorkSheetType!]! @isAuthenticated @hasPermission
  worksheetByUid(worksheetUid: String!): WorkSheetType! @isAuthenticated @hasPermission
  worksheetById(worksheetId: String!): WorkSheetType! @isAuthenticated @hasPermission
  worksheetByStatus(worksheetStatus: String!): [WorkSheetType!]! @isAuthenticated @hasPermission
  worksheetTemplateAll: [WorkSheetTemplateType!]! @isAuthenticated @hasPermission
  worksheetTemplateByUid(worksheetUid: String!): [WorkSheetType!]! @isAuthenticated @hasPermission
  threadsForUser(uid: String!): [MessageThreadType!]
  threadByUid(uid: String!): MessageThreadType
  noticeByUid(uid: String!): NoticeType @isAuthenticated @hasPermission
  noticesByCreator(uid: String!): [NoticeType!] @isAuthenticated @hasPermission
  noticeFilter(groupUid: String, departmentUid: String): [NoticeType!]! @isAuthenticated @hasPermission
  notificationFilter(groupUid: String, departmentUid: String, userUid: String): [NotificationType!]!
  notificationByUid(uid: String!): NotificationType
  countSampleGroupByStatus: GroupedCounts! @isAuthenticated @hasPermission
  countSampleGroupByAction(startDate: String = null, endDate: String = null): GroupedData! @isAuthenticated @hasPermission
  countAnalyteGroupByStatus: GroupedCounts! @isAuthenticated @hasPermission
  countWorksheetGroupByStatus: GroupedCounts! @isAuthenticated @hasPermission
  countExtrasGroupByStatus: GroupedCounts! @isAuthenticated @hasPermission
  countAnalyteGroupByInstrument(startDate: String = null, endDate: String = null): GroupedCounts! @isAuthenticated @hasPermission
  sampleProcessPerformance(startDate: String!, endDate: String!): ProcessStatistics! @isAuthenticated @hasPermission
  analysisProcessPerformance(process: String!, startDate: String!, endDate: String!): ProcessStatistics! @isAuthenticated @hasPermission
  sampleLaggards: LaggardStatistics! @isAuthenticated @hasPermission
  reflexRuleAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): ReflexRuleCursorPage!
  reflexRuleByUid(uid: String!): ReflexRuleType
  storeRoomAll: [StoreRoomType!]! @isAuthenticated @hasPermission
  storeRoomByUid(uid: String!): StoreRoomType @isAuthenticated @hasPermission
  storageLocations(storeRoomUid: String!): [StorageLocationType!]! @isAuthenticated @hasPermission
  storageLocationByUid(uid: String!): StorageLocationType @isAuthenticated @hasPermission
  storageSections(storageLocationUid: String!): [StorageSectionType!]! @isAuthenticated @hasPermission
  storageSectionByUid(uid: String!): StorageSectionType @isAuthenticated @hasPermission
  storageContainers(storageSectionUid: String!): [StorageContainerType!]! @isAuthenticated @hasPermission
  storageContainerByUid(uid: String!): StorageContainerType @isAuthenticated @hasPermission
  stockItemAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): StockItemCursorPage! @isAuthenticated @hasPermission
  stockItemByUid(uid: String!): StockItemType @isAuthenticated @hasPermission
  stockItemVariants(stockItemUid: String!): [StockItemVariantType!]! @isAuthenticated @hasPermission
  stockProductAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): StockItemVariantCursorPage! @isAuthenticated @hasPermission
  stockProductByUid(uid: String!): StockItemVariantType @isAuthenticated @hasPermission
  stockLots(productUid: String!): [StockLotType!]! @isAuthenticated @hasPermission
  stockCategoryAll: [StockCategoryType!]!
  stockCategoryByUid(uid: String!): StockCategoryType
  hazardAll: [HazardType!]!
  hazardByUid(uid: String!): HazardType
  stockUnitAll: [StockUnitType!]!
  stockUnitByUid(uid: String!): StockUnitType
  stockProductInventory(productUid: String!, stockLotUid: String!): [StockProductInventoryType!]! @isAuthenticated @hasPermission
  stockOrderAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, status: String = null, text: String = null, sortBy: [String!] = null): StockOrderCursorPage! @isAuthenticated @hasPermission
  stockOrderByUid(uid: String!): StockOrderType @isAuthenticated @hasPermission
  stockOrderProductAll(stockOrderUid: String!): [StockOrderProductType!]! @isAuthenticated @hasPermission
  stockOrderProductByUid(uid: String!): StockOrderProductType @isAuthenticated @hasPermission
  stockReceipt(productUid: String!, stockLotUid: String!): [StockReceiptType!]! @isAuthenticated @hasPermission
  stockAdjustmentAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null, productUid: String = null): StockAdjustmentCursorPage! @isAuthenticated @hasPermission
  stockAdjustmentByUid(uid: String!): StockAdjustmentType @isAuthenticated @hasPermission
  impressReportsMeta(uids: [String!]!): [ReportImpressType!]!
  impressReportsDownload(sampleIds: [String!]!): BytesScalar
  impressReportDownload(uid: String!): BytesScalar
  barcodeSamples(sampleUids: [String!]!): [BytesScalar!]
  instrumentTypeAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): InstrumentTypeCursorPage!
  instrumentAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): InstrumentCursorPage!
  laboratoryInstrumentAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): LaboratoryInstrumentCursorPage!
  methodAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): MethodCursorPage!
  instrumentTypeByUid(uid: String!): InstrumentTypeType!
  instrumentByUid(uid: String!): InstrumentType!
  laboratoryInstrumentByUid(uid: String!): LaboratoryInstrumentType!
  methodByUid(uid: String!): MethodType!
  instrumentResultExclusions(instrumentUid: String!): [InstrumentResultExclusionsType!]!
  instrumentResultTranslations(instrumentUid: String!): [InstrumentResultTranslationType!]!
  shipmentAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, incoming: Boolean! = false, status: String = null, sortBy: [String!] = null): ShipmentCursorPage! @isAuthenticated @hasPermission
  shipmentByUid(shipmentUid: String!): ShipmentType! @isAuthenticated @hasPermission
  shipmentById(shipmentId: String!): ShipmentType! @isAuthenticated @hasPermission
  shipmentByStatus(shipmentStatus: String!): [ShipmentType!]! @isAuthenticated @hasPermission
  referralLaboratoryAll: [ReferralLaboratoryType!]!
  referralLaboratoryByUid(uid: String!): ReferralLaboratoryType!
  referralLaboratoryByCode(code: String!): ReferralLaboratoryType!
  manifestReportDownload(uid: String!): BytesScalar @isAuthenticated @hasPermission
  bills(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, isActive: Boolean = null, partial: Boolean = null, clientUid: String = null, sortBy: [String!] = null): TestBillCursorPage! @isAuthenticated @hasPermission
  ordersByBillUid(uid: String!): [AnalysisRequestType!]! @isAuthenticated @hasPermission
  billByUid(uid: String!): TestBillType @isAuthenticated @hasPermission
  billsForPatient(patientUid: String!): [TestBillType!] @isAuthenticated @hasPermission
  billsForClient(clientUid: String!): [TestBillType!] @isAuthenticated @hasPermission
  billTransactions(billUid: String!): [TestBillTransactionType!] @isAuthenticated @hasPermission
  billInvoices(billUid: String!): [TestBillInvoiceType!] @isAuthenticated @hasPermission
  billInvoice(invoiceUid: String!): TestBillInvoiceType @isAuthenticated @hasPermission
  billInvoiceCreate(billUid: String!): BytesScalar @isAuthenticated @hasPermission
  priceForProfile(profileUid: String!): ProfilePriceType @isAuthenticated @hasPermission
  priceForAnalysis(analysisUid: String!): AnalysisPriceType @isAuthenticated @hasPermission
  discountForProfile(profileUid: String!): ProfileDiscountType @isAuthenticated @hasPermission
  discountForAnalysis(analysisUid: String!): AnalysisDiscountType @isAuthenticated @hasPermission
  voucherAll: [VoucherType!] @isAuthenticated @hasPermission
  voucherByUid(uid: String!): VoucherType @isAuthenticated @hasPermission
  voucherCodes(voucherUid: String!): [VoucherCodeType!] @isAuthenticated @hasPermission
  abxGuidelinesAll: [AbxGuidelineType!]
  abxGuidelineByUid(uid: String!): AbxGuidelineType
  abxAntibioticAll(text: String!, pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, sortBy: [String!] = null): AbxAntibioticCursorPage!
  abxAntibioticByUid(uid: String!): AbxAntibioticType
  abxLaboratoryAntibiotics: [AbxAntibioticType!]
  abxKingdomAll: [AbxKingdomType!]
  abxKingdomByUid(uid: String!): AbxKingdomType
  abxPhylumAll: [AbxPhylumType!]
  abxPhylumByUid(uid: String!): AbxPhylumType
  abxClassAll: [AbxClassType!]
  abxClassByUid(uid: String!): AbxClassType
  abxOrderAll: [AbxOrderType!]
  abxOrderByUid(uid: String!): AbxOrderType
  abxFamilyAll: [AbxFamilyType!]
  abxFamilyByUid(uid: String!): AbxFamilyType
  abxGenusAll: [AbxGenusType!]
  abxGenusByUid(uid: String!): AbxGenusType
  abxOrganismAll(text: String!, pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, sortBy: [String!] = null): AbxOrganismCursorPage!
  abxOrganismByUid(uid: String!): AbxOrganismType
  abxOrganismResultAll(analysisResultUid: String!): [AbxOrganismResultType!]
  abxOrganismSerotypeAll(text: String!, pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, sortBy: [String!] = null): AbxOrganismSerotypeCursorPage!
  abxOrganismSerotypeByUid(uid: String!): AbxOrganismSerotypeType
  abxTestMethodAll: [AbxTestMethodType!]
  abxTestMethodByUid(uid: String!): AbxTestMethodType
  abxBreakpointTypeAll: [AbxBreakpointTypeTyp!]
  abxBreakpointTypeByUid(uid: String!): AbxBreakpointTypeTyp
  abxHostAll: [AbxHostType!]
  abxHostByUid(uid: String!): AbxHostType
  abxSiteOfInfectionAll: [AbxSiteOfInfectionType!]
  abxSiteOfInfectionByUid(uid: String!): AbxSiteOfInfectionType
  abxGuidelineYearAll: [AbxGuidelineYearType!]
  abxBreakpointAll(text: String!, pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, sortBy: [String!] = null): AbxBreakpointTypCursorPage!
  abxBreakpointByUid(uid: String!): AbxBreakpointTyp
  abxExpectedResistancePhenotypeAll(text: String!, pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, sortBy: [String!] = null): AbxExpResPhenotypeCursorPage!
  abxExpectedResistancePhenotypeByUid(uid: String!): AbxExpResPhenotypeType
  abxExpertInterpretationRuleAll(text: String!, pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, sortBy: [String!] = null): AbxExpertInterpretationRuleCursorPage!
  abxExpertInterpretationRuleByUid(uid: String!): AbxExpertInterpretationRuleType
  abxMediumAll: [AbxMediumType!]
  abxMediumByUid(uid: String!): AbxMediumType
  abxQcRangeAll(text: String!, pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, sortBy: [String!] = null): AbxQCRangeCursorPage!
  abxQcRangeByUid(uid: String!): AbxQCRangeType
  abxAstPanelAll: [AbxASTPanelType!]
  abxAstPanelFilter(organismUid: String!, text: String! = ""): [AbxASTPanelType!]
  abxAstPanelByUid(uid: String!): AbxASTPanelType
  abxAstResultAll(sampleUid: String!): [AbxASTResultType!]
  grindSchemeAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): GrindSchemeCursorPage! @isAuthenticated @hasPermission
  grindSchemeByUid(uid: String!): GrindSchemeType @isAuthenticated @hasPermission
  grindBoardAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, schemeUid: String = null, sortBy: [String!] = null): GrindBoardCursorPage! @isAuthenticated @hasPermission
  grindBoardByUid(uid: String!): GrindBoardType @isAuthenticated @hasPermission
  grindBoardsByScheme(schemeUid: String!): [GrindBoardType!]! @isAuthenticated @hasPermission
  grindPosterAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, boardUid: String = null, category: String = null, status: String = null, sortBy: [String!] = null): GrindPosterCursorPage! @isAuthenticated @hasPermission
  grindPosterByUid(uid: String!): GrindPosterType @isAuthenticated @hasPermission
  grindPostersByBoard(boardUid: String!): [GrindPosterType!]! @isAuthenticated @hasPermission
  grindErrandAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, posterUid: String = null, category: String = null, priority: String = null, assigneeUid: String = null, reporterUid: String = null, sortBy: [String!] = null): GrindErrandCursorPage! @isAuthenticated @hasPermission
  grindErrandByUid(uid: String!): GrindErrandType @isAuthenticated @hasPermission
  grindErrandsByPoster(posterUid: String!): [GrindErrandType!]! @isAuthenticated @hasPermission
  grindErrandsByAssignee(assigneeUid: String!): [GrindErrandType!]! @isAuthenticated @hasPermission
  grindLabelAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): GrindLabelCursorPage! @isAuthenticated @hasPermission
  grindLabelByUid(uid: String!): GrindLabelType @isAuthenticated @hasPermission
  grindLabelsByCategory(category: String!): [GrindLabelType!]! @isAuthenticated @hasPermission
  grindStampAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): GrindStampCursorPage! @isAuthenticated @hasPermission
  grindStampByUid(uid: String!): GrindStampType @isAuthenticated @hasPermission
  grindStampByCategory(category: StampCategory!): [GrindStampType!]! @isAuthenticated @hasPermission
  grindMediaAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, target: String = null, targetUid: String = null, sortBy: [String!] = null): GrindMediaCursorPage! @isAuthenticated @hasPermission
  grindMediaByUid(uid: String!): GrindMediaType @isAuthenticated @hasPermission
  grindMediaByTarget(target: String!, targetUid: String!): [GrindMediaType!]! @isAuthenticated @hasPermission
  grindMilestoneAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, errandUid: String = null, complete: Boolean = null, assigneeUid: String = null, sortBy: [String!] = null): GrindMilestoneCursorPage! @isAuthenticated @hasPermission
  grindMilestoneByUid(uid: String!): GrindMilestoneType @isAuthenticated @hasPermission
  grindMilestonesByErrand(errandUid: String!): [GrindMilestoneType!]! @isAuthenticated @hasPermission
  grindMilestonesByAssignee(assigneeUid: String!): [GrindMilestoneType!]! @isAuthenticated @hasPermission
  grindOccurrenceAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, target: String = null, targetUid: String = null, actorUid: String = null, sortBy: [String!] = null): GrindOccurrenceCursorPage! @isAuthenticated @hasPermission
  grindOccurrenceByUid(uid: String!): GrindOccurrenceType @isAuthenticated @hasPermission
  grindOccurrencesByTarget(target: String!, targetUid: String!): [GrindOccurrenceType!]! @isAuthenticated @hasPermission
  grindOccurrencesByActor(actorUid: String!): [GrindOccurrenceType!]! @isAuthenticated @hasPermission
  grindErrandDiscussions(errandUid: String!): [GrindErrandDiscussionType!]! @isAuthenticated @hasPermission
  grindErrandDiscussionsByParent(parentUid: String!): [GrindErrandDiscussionType!]! @isAuthenticated @hasPermission
  downloadGrindMediaFileUrl(uid: String!): FileUrlResponseType!
  downloadGrindMediaFile(uid: String!): FileResponseType!
  documentCategoryByUid(uid: String!): DocumentCategoryType @isAuthenticated @hasPermission
  documentTagAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, sortBy: [String!] = null): DocumentTagCursorPage! @isAuthenticated @hasPermission
  documentTagByUid(uid: String!): DocumentTagType @isAuthenticated @hasPermission
  documentFolderAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, parentUid: String = null, sortBy: [String!] = null): DocumentFolderCursorPage! @isAuthenticated @hasPermission
  documentFolderByUid(uid: String!): DocumentFolderType @isAuthenticated @hasPermission
  documentRootFolders: [DocumentFolderType!]! @isAuthenticated @hasPermission
  documentTemplateAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, categoryUid: String = null, sortBy: [String!] = null): DocumentTemplateCursorPage! @isAuthenticated @hasPermission
  documentTemplateByUid(uid: String!): DocumentTemplateType @isAuthenticated @hasPermission
  documentAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, text: String = null, folderUid: String = null, categoryUid: String = null, departmentUid: String = null, tagUid: String = null, status: String = null, authorUid: String = null, readerUid: String = null, sortBy: [String!] = null): DocumentCursorPage! @isAuthenticated @hasPermission
  documentByUid(uid: String!): DocumentType @isAuthenticated @hasPermission
  documentByDocumentId(documentId: String!): DocumentType @isAuthenticated @hasPermission
  documentVersionAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, documentUid: String = null, sortBy: [String!] = null): DocumentVersionCursorPage! @isAuthenticated @hasPermission
  documentVersionByUid(uid: String!): DocumentVersionType @isAuthenticated @hasPermission
  documentVersionsByDocument(documentUid: String!): [DocumentVersionType!]! @isAuthenticated @hasPermission
  documentStatusAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, documentUid: String = null, status: String = null, sortBy: [String!] = null): DocumentStatusCursorPage! @isAuthenticated @hasPermission
  documentStatusByUid(uid: String!): DocumentStatusType @isAuthenticated @hasPermission
  documentStatusesByDocument(documentUid: String!): [DocumentStatusType!]! @isAuthenticated @hasPermission
  documentReviewCycleAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, documentUid: String = null, status: String = null, initiatedByUid: String = null, sortBy: [String!] = null): DocumentReviewCycleCursorPage! @isAuthenticated @hasPermission
  documentReviewCycleByUid(uid: String!): DocumentReviewCycleType @isAuthenticated @hasPermission
  documentReviewCyclesByDocument(documentUid: String!): [DocumentReviewCycleType!]! @isAuthenticated @hasPermission
  documentReviewStepAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, reviewCycleUid: String = null, reviewerUid: String = null, status: String = null, sortBy: [String!] = null): DocumentReviewStepCursorPage! @isAuthenticated @hasPermission
  documentReviewStepByUid(uid: String!): DocumentReviewStepType @isAuthenticated @hasPermission
  documentReviewStepsByCycle(reviewCycleUid: String!): [DocumentReviewStepType!]! @isAuthenticated @hasPermission
  documentReviewStepsByReviewer(reviewerUid: String!): [DocumentReviewStepType!]! @isAuthenticated @hasPermission
  documentSubscriptionAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, documentUid: String = null, userUid: String = null, subscriptionType: String = null, sortBy: [String!] = null): DocumentSubscriptionCursorPage! @isAuthenticated @hasPermission
  documentSubscriptionByUid(uid: String!): DocumentSubscriptionType @isAuthenticated @hasPermission
  documentSubscriptionsByDocument(documentUid: String!): [DocumentSubscriptionType!]! @isAuthenticated @hasPermission
  documentSubscriptionsByUser(userUid: String!): [DocumentSubscriptionType!]! @isAuthenticated @hasPermission
  documentAuditAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, documentUid: String = null, userUid: String = null, action: String = null, sortBy: [String!] = null): DocumentAuditCursorPage! @isAuthenticated @hasPermission
  documentAuditByUid(uid: String!): DocumentAuditType @isAuthenticated @hasPermission
  documentAuditsByDocument(documentUid: String!): [DocumentAuditType!]! @isAuthenticated @hasPermission
  smsTemplatesByTarget(targetType: String!, targetUid: String!): [SmsTemplateType!]!
  smsAll(pageSize: Int = null, afterCursor: String = null, beforeCursor: String = null, status: String = null, audience: String = null, sortBy: [String!] = null): SmsMessageCursorPage!
}

input ReferenceSampleInput {
  sampleUid: String = null
  shipedSampleUid: String = null
  analyses: [String!]!
}

input ReferralLaboratoryInputType {
  name: String!
  code: String!
  url: String!
  username: String!
  password: String!
  isReference: Boolean! = false
  isReferral: Boolean! = false
}

""""""
union ReferralLaboratoryResponse = ReferralLaboratoryType | OperationError

type ReferralLaboratoryType {
  uid: String!
  name: String
  code: String
  url: String
  username: String
  password: String
  isReference: Boolean
  isReferral: Boolean
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input ReflexActionInput {
  level: Int!
  description: String = ""
  analyses: [String!]!
  reflexRuleUid: String!
  sampleTypeUid: String = null
}

""""""
union ReflexActionResponse = ReflexActionType | OperationError

type ReflexActionType {
  uid: String!
  level: Int!
  description: String!
  analyses: [AnalysisType!]
  sampleTypeUid: String
  sampleType: SampleTypeTyp
  reflexRuleUid: String!
  reflexRule: ReflexRuleType
  brains: [ReflexBrainType!]
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input ReflexAddNewInput {
  analysisUid: String!
  count: Int!
}

input ReflexBrainActionInput {
  addNew: [ReflexAddNewInput!] = null
  finalise: [ReflexFinalInput!] = null
}

type ReflexBrainActionType {
  reflexBrainUid: String!
  reflexBrain: ReflexBrainType
  uid: String!
  description: String!
  addNew: [ReflexBrainAdditionType!]
  finalise: [ReflexBrainFinalType!]
  priority: Int!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type ReflexBrainAdditionType {
  analysisUid: String!
  analysis: AnalysisType
  reflexBrainActionUid: String!
  reflexBrainAction: ReflexBrainActionType
  count: Int!
  laboratoryUid: String
  laboratory: LaboratoryType
}

type ReflexBrainConditionCriteriaType {
  analysisUid: String!
  analysis: AnalysisType
  reflexBrainConditionUid: String!
  reflexBrainCondition: ReflexBrainConditionType
  operator: String!
  value: String!
  laboratoryUid: String
  laboratory: LaboratoryType
}

input ReflexBrainConditionInput {
  description: String = ""
  priority: Int = 0
  criteria: [ReflexBrainCriteriaInput!] = null
}

type ReflexBrainConditionType {
  uid: String!
  reflexBrainUid: String!
  reflexBrain: ReflexBrainType!
  description: String
  criteria: [ReflexBrainConditionCriteriaType!]
  priority: Int!
  laboratoryUid: String
  laboratory: LaboratoryType
}

input ReflexBrainCriteriaInput {
  analysisUid: String!
  operator: String!
  value: String!
}

type ReflexBrainFinalType {
  analysisUid: String!
  analysis: AnalysisType
  reflexBrainActionUid: String!
  reflexBrainAction: ReflexBrainActionType
  value: String!
  laboratoryUid: String
  laboratory: LaboratoryType
}

input ReflexBrainInput {
  reflexActionUid: String!
  description: String = ""
  priority: Int = 0
  conditions: [ReflexBrainConditionInput!] = null
  actions: [ReflexBrainActionInput!] = null
}

""""""
union ReflexBrainResponse = ReflexBrainType | OperationError

type ReflexBrainType {
  reflexActionUid: String!
  reflexAction: ReflexBrainType
  actions: [ReflexBrainActionType!]!
  conditions: [ReflexBrainConditionType!]!
  uid: String!
  description: String!
  priority: Int!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

input ReflexFinalInput {
  analysisUid: String!
  value: String!
}

type ReflexRuleCursorPage {
  pageInfo: PageInfo!
  edges: [ReflexRuleEdge!]
  items: [ReflexRuleType!]
  totalCount: Int!
}

type ReflexRuleEdge {
  cursor: String!
  node: ReflexRuleType!
}

input ReflexRuleInput {
  name: String!
  description: String = ""
}

""""""
union ReflexRuleResponse = ReflexRuleType | OperationError

type ReflexRuleType {
  uid: String!
  name: String!
  description: String!
  reflexActions: [ReflexActionType!]
  isActive: Boolean!
  priority: Int!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

""""""
union RejectionReasonResponse = RejectionReasonType | OperationError

type RejectionReasonType {
  uid: String!
  reason: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type ReportImpressType {
  uid: String!
  state: String
  sampleUid: String
  sample: SampleType
  emailRequired: Boolean
  emailSent: Boolean
  smsRequired: Boolean
  smsSent: Boolean
  generatedByUid: String
  generatedBy: UserType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: DateTime!
  updatedByUid: String
  updatedBy: UserType
  jsonContent: JSONScalar
}

type ReportMetaType {
  uid: String!
  periodStart: DateTime!
  periodEnd: DateTime!
  dateColumn: String!
  location: String
  sampleStates: String
  reportType: String!
  status: String
  temp: String
  analyses: [AnalysisType!]
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input ReservedInputType {
  position: Int!
  levelUid: String
}

type ResultListingType {
  results: [AnalysisResultType!]!
}

type ResultMutationType {
  uid: String!
  resultUid: String!
  before: String!
  after: String!
  mutation: String!
  date: String
  laboratoryUid: String
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type ResultOperationType {
  isBackground: Boolean!
  results: [AnalysisResultType!]
  message: String
}

input ResultOptionInputType {
  analysisUid: String!
  sampleTypes: [String!]
  optionKey: Int!
  value: String!
}

""""""
union ResultOptionResponse = ResultOptionType | OperationError

type ResultOptionType {
  uid: String!
  optionKey: Int!
  value: String!
  analysisUid: String!
  sampleTypes: [SampleTypeTyp!]
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

"""Union of possible outcomes when actioning samples"""
union ResultedSampleActionResponse = ResultedSampleListingType | OperationError

type ResultedSampleListingType {
  samples: [SamplesWithResults!]!
}

"""Union of possible outcomes when actioning samples"""
union SampleActionResponse = SampleListingType | OperationSuccess | OperationError

type SampleCursorPage {
  pageInfo: PageInfo!
  edges: [SampleEdge!]
  items: [SamplesWithResults!]
  totalCount: Int!
}

type SampleEdge {
  cursor: String!
  node: SamplesWithResults!
}

type SampleListingType {
  samples: [SampleType!]!
  message: String
}

input SamplePublishInputType {
  uid: String!
  action: String! = ""
}

input SampleRejectInputType {
  uid: String!
  reasons: [String!]!
  other: String = ""
}

type SampleType {
  uid: String!
  analysisRequestUid: String!
  analysisRequest: AnalysisRequestType
  sampleTypeUid: String!
  sampleId: String!
  priority: Int!
  status: String
  assigned: Boolean!
  dateCollected: DateTime
  submittedByUid: String
  submittedBy: UserType
  dateSubmitted: DateTime
  verifiedByUid: String
  verifiedBy: UserType
  dateVerified: DateTime
  invalidatedByUid: String
  invalidatedBy: UserType
  dateInvalidated: DateTime
  receivedByUid: String
  receivedBy: UserType
  dateReceived: DateTime
  publishedByUid: String
  publishedBy: UserType
  datePublished: DateTime
  cancelledByUid: String
  cancelledBy: UserType
  dateCancelled: DateTime
  printed: Boolean
  datePrinted: DateTime
  printedByUid: String
  printedBy: UserType
  dueDate: String
  rejectionReasons: [RejectionReasonType!]
  internalUse: Boolean!
  parentId: String
  parent: SampleType
  qcSetUid: String
  qcSet: QCSetType
  qcLevelUid: String
  qcLevel: QCLevelType
  storageContainerUid: String
  storageContainer: StorageContainerType
  storageSlot: String
  storageSlotIndex: Int
  storedByUid: String
  storedBy: UserType
  dateStored: DateTime
  dateRetrievedFromStorage: DateTime
  metadataSnapshot: JSONScalar
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  sampleType: SampleTypeTyp
  profiles: [ProfileType!]!
  analyses: [AnalysisType!]
}

input SampleTypeInputType {
  name: String!
  abbr: String!
  description: String = ""
  internalUse: Boolean = false
  active: Boolean = true
}

input SampleTypeMappingInputType {
  sampleTypeUid: String!
  codingStandardUid: String!
  name: String!
  code: String!
  description: String = null
}

"""Union of possible outcomes when adding a new notice"""
union SampleTypeMappingResponse = SampleTypeMappingType | OperationError

type SampleTypeMappingType {
  uid: String!
  sampleTypeUid: String!
  sampleType: SampleTypeTyp
  codingStandardUid: String!
  codingStandard: CodingStandardType
  name: String
  description: String
  code: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

""""""
union SampleTypeResponse = SampleTypeTyp | OperationError

type SampleTypeTyp {
  uid: String!
  name: String!
  description: String
  active: Boolean!
  internalUse: Boolean!
  abbr: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type SamplesWithResults {
  uid: String!
  analysisRequestUid: String!
  analysisRequest: AnalysisRequestType
  sampleTypeUid: String!
  sampleId: String!
  priority: Int!
  status: String
  assigned: Boolean!
  dateCollected: DateTime
  submittedByUid: String
  submittedBy: UserType
  dateSubmitted: DateTime
  verifiedByUid: String
  verifiedBy: UserType
  dateVerified: DateTime
  invalidatedByUid: String
  invalidatedBy: UserType
  dateInvalidated: DateTime
  receivedByUid: String
  receivedBy: UserType
  dateReceived: DateTime
  publishedByUid: String
  publishedBy: UserType
  datePublished: DateTime
  cancelledByUid: String
  cancelledBy: UserType
  dateCancelled: DateTime
  printed: Boolean
  datePrinted: DateTime
  printedByUid: String
  printedBy: UserType
  dueDate: String
  rejectionReasons: [RejectionReasonType!]
  internalUse: Boolean!
  parentId: String
  parent: SampleType
  qcSetUid: String
  qcSet: QCSetType
  qcLevelUid: String
  qcLevel: QCLevelType
  storageContainerUid: String
  storageContainer: StorageContainerType
  storageSlot: String
  storageSlotIndex: Int
  storedByUid: String
  storedBy: UserType
  dateStored: DateTime
  dateRetrievedFromStorage: DateTime
  metadataSnapshot: JSONScalar
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  sampleType: SampleTypeTyp
  profiles: [ProfileType!]!
  analyses: [AnalysisType!]
  analysisResults: [AnalysisResultType!]
}

type ShipmentCursorPage {
  pageInfo: PageInfo!
  edges: [ShipmentEdge!]
  items: [ShipmentType!]
  totalCount: Int!
}

type ShipmentEdge {
  cursor: String!
  node: ShipmentType!
}

input ShipmentInputType {
  laboratoryUid: String
  courier: String!
  comment: String
  count: Int = 1
}

type ShipmentListingType {
  shipments: [ShipmentType!]
}

input ShipmentManageSamplesInput {
  samples: [ReferenceSampleInput!]!
  action: String!
}

""""""
union ShipmentResponse = ShipmentType | OperationError

type ShipmentType {
  uid: String!
  shipmentId: String
  comment: String
  courier: String
  assignedCount: Int
  data: JSONScalar
  state: String
  incoming: Boolean!
  laboratoryUid: String
  laboratory: LaboratoryType
  jsonContent: JSONScalar
  pdfContent: BytesScalar
  finalisedByUid: String
  finalisedBy: UserType
  dateFinalised: DateTime
  dispatchedByUid: String
  dispatchedBy: UserType
  dateDispatched: DateTime
  recalledByUid: String
  recalledBy: UserType
  dateRecalled: DateTime
  rejectedByUid: String
  rejectedBy: UserType
  dateRejected: DateTime
  receivedByUid: String
  receivedBy: UserType
  dateReceived: DateTime
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  samples: [SampleType!]
  shippedSamples: [ShippedSampleType!]
}

input ShipmentUpdateInputType {
  laboratoryUid: String
  courier: String!
  comment: String = ""
}

""""""
union ShipmentsResponse = ShipmentListingType | OperationError

type ShippedSampleType {
  sampleUid: String!
  sample: SampleType!
  shipmentUid: String!
  shipment: ShipmentType!
  resultNotified: Boolean
  extSampleUid: String
  extSampleId: String
  laboratoryUid: String
  laboratory: LaboratoryType
}

enum SmsAudience {
  PATIENT
  CLIENT
}

type SmsMessageCursorPage {
  pageInfo: PageInfo!
  edges: [SmsMessageEdge!]
  items: [SmsMessageType!]
  totalCount: Int!
}

type SmsMessageEdge {
  cursor: String!
  node: SmsMessageType!
}

type SmsMessageType {
  uid: String!
  templateUid: String
  recipient: String
  message: String
  status: String
  sentAt: DateTime
  targetType: String
  targetUid: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input SmsTemplateInputType {
  """Category name"""
  name: String!
  template: String!
  description: String!
  targetType: String!
  targetUid: String!
  specificationTrigger: SmsTrigger! = ANY_ABNORMAL
  audience: SmsAudience! = PATIENT
  isActive: Boolean! = true
}

"""Response for Sms Template operations"""
union SmsTemplateResponse = SmsTemplateType | OperationError

type SmsTemplateType {
  uid: String!
  name: String
  template: String
  description: String
  targetType: String
  targetUid: String
  specificationTrigger: SmsTrigger
  audience: SmsAudience
  isActive: Boolean!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

enum SmsTrigger {
  NORMAL
  BELOW_NORMAL
  ABOVE_NORMAL
  BELOW_WARNING
  ABOVE_WARNING
  ANY_ABNORMAL
  ANY_WARNING
  ANY_RESULT
  TEXTUAL_NORMAL
  TEXTUAL_WARNING
}

enum StampCategory {
  PROJECT
  TICKET
}

type StockAdjustmentCursorPage {
  pageInfo: PageInfo!
  edges: [StockAdjustmentEdge!]
  items: [StockAdjustmentType!]
  totalCount: Int!
}

type StockAdjustmentEdge {
  cursor: String!
  node: StockAdjustmentType!
}

input StockAdjustmentInputType {
  productUid: String!
  stockLotUid: String!
  adjustmentType: String!
  adjust: Int!
  remarks: String = null
}

""""""
union StockAdjustmentResponse = StockAdjustmentType | OperationError

type StockAdjustmentType {
  uid: String!
  productUid: String
  product: StockItemVariantType
  stockLotUid: String
  stockLot: StockLotType
  adjustmentType: String
  adjust: Int
  adjustmentDate: String
  remarks: String
  adjustmentByUid: String
  adjustmentBy: UserType
  adjustmentForUid: String
  adjustmentFor: UserType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input StockCategoryInputType {
  name: String!
  description: String!
}

""""""
union StockCategoryResponse = StockCategoryType | OperationError

type StockCategoryType {
  uid: String!
  name: String!
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type StockItemCursorPage {
  pageInfo: PageInfo!
  edges: [StockItemEdge!]
  items: [StockItemType!]
  totalCount: Int!
}

type StockItemEdge {
  cursor: String!
  node: StockItemType!
}

input StockItemInputType {
  name: String!
  description: String!
  categoryUid: String = null
  hazardUid: String = null
  maximumLevel: Int = null
  minimumLevel: Int = null
}

""""""
union StockItemResponse = StockItemType | OperationError

type StockItemType {
  uid: String!
  name: String!
  categoryUid: String
  category: StockCategoryType
  hazardUid: String
  hazard: HazardType
  minimumLevel: Int
  maximumLevel: Int
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  variants: [StockItemVariantType!]
}

type StockItemVariantCursorPage {
  pageInfo: PageInfo!
  edges: [StockItemVariantType!]
  items: [StockItemVariantType!]
  totalCount: Int!
}

type StockItemVariantEdge {
  cursor: String!
  node: StockItemVariantType!
}

input StockItemVariantInputType {
  name: String!
  description: String!
  maximumLevel: Int = null
  minimumLevel: Int = null
}

""""""
union StockItemVariantResponse = StockItemVariantType | OperationError

type StockItemVariantType {
  uid: String!
  name: String!
  stockItemUid: String
  stockItem: StockItemType
  minimumLevel: Int
  maximumLevel: Int
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  quantity: Int!
}

type StockLotType {
  uid: String!
  productUid: String!
  product: StockItemVariantType
  lotNumber: String!
  expiryDate: DateTime!
  remarks: String
  quantity: Int!
  laboratoryUid: String
  laboratory: LaboratoryType
}

input StockOrderApprovalInputType {
  remarks: String!
  status: String!
}

type StockOrderCursorPage {
  pageInfo: PageInfo!
  edges: [StockOrderEdge!]
  items: [StockOrderType!]
  totalCount: Int!
}

type StockOrderEdge {
  cursor: String!
  node: StockOrderType!
}

input StockOrderInputType {
  orderProducts: [StockOrderProductLineInputType!]!
  departmentUid: String = null
}

type StockOrderLineType {
  stockOrder: StockOrderType!
  orderProducts: [StockOrderProductType!]!
}

input StockOrderProductLineInputType {
  productUid: String!
  stockLotUid: String!
  quantity: Int!
  price: Float! = 0
  remarks: String = null
}

type StockOrderProductType {
  uid: String!
  productUid: String
  product: StockItemVariantType
  stockLotUid: String!
  stockLot: StockLotType
  orderUid: String
  order: StockOrderType
  quantity: Int
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

""""""
union StockOrderResponse = StockOrderLineType | StockOrderType | OperationError

type StockOrderType {
  uid: String!
  fulfilledByUid: String
  fulfilledBy: UserType
  orderByUid: String
  orderBy: UserType
  departmentUid: String
  department: DepartmentType
  status: String
  remarks: String
  orderNumber: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type StockPackagingType {
  uid: String!
  name: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type StockProductInventoryType {
  uid: String!
  productUid: String!
  product: StockItemVariantType
  stockLotUid: String!
  stockLot: StockLotType
  quantity: Int!
  remarks: String
  laboratoryUid: String
  laboratory: LaboratoryType
}

input StockReceiptInputType {
  productUid: String!
  lotNumber: String!
  unitPrice: Float = null
  totalPrice: Float = null
  supplierUid: String!
  unitUid: String!
  singlesReceived: Int!
  packagesReceived: Int!
  packageFactor: Int!
  quantityReceived: Int!
  receiptType: String!
  receiptByUid: String!
  receiptDate: DateTime
  expiryDate: DateTime
}

type StockReceiptType {
  uid: String!
  productUid: String
  product: StockItemVariantType
  stockLotUid: String
  stockLot: StockLotType
  unitPrice: Float!
  totalPrice: Float!
  supplierUid: String
  supplier: SupplierType
  unitUid: String!
  unit: StockUnitType
  singlesReceived: Int
  packagesReceived: Int
  packageFactor: Int
  quantityReceived: Int
  receiptType: String!
  receiptByUid: String!
  receiptBy: UserType
  receiptDate: DateTime!
  laboratoryUid: String
  laboratory: LaboratoryType
}

type StockTransactionCursorPage {
  pageInfo: PageInfo!
  edges: [StockTransactionEdge!]
  items: [StockTransactionType!]
  totalCount: Int!
}

type StockTransactionEdge {
  cursor: String!
  node: StockTransactionType!
}

type StockTransactionType {
  uid: String!
  productUid: String
  product: StockItemVariantType
  issued: Int
  issuedToUid: String
  issuedTo: UserType
  departmentUid: String
  department: DepartmentType
  dateIssued: DateTime
  transactionByUid: String
  transactionBy: UserType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  laboratoryUid: String
  laboratory: LaboratoryType
}

input StockUnitInputType {
  name: String!
}

""""""
union StockUnitResponse = StockUnitType | OperationError

type StockUnitType {
  uid: String!
  name: String!
  description: String!
  synonyms: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input StorageContainerInputType {
  name: String!
  description: String
  storageSectionUid: String!
  grid: Boolean = false
  rowWise: Boolean = false
  cols: Int = 0
  rows: Int = 0
  slots: Int = 0
}

""""""
union StorageContainerResponse = StorageContainerType | OperationError

type StorageContainerType {
  uid: String!
  name: String!
  description: String
  storageSectionUid: String!
  storageSection: StorageSectionType
  laboratoryUid: String
  laboratory: LaboratoryType
  grid: Boolean
  rowWise: Boolean
  cols: Int
  rows: Int
  slots: Int
  storedCount: Int
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  tag: String!
}

input StorageLocationInputType {
  name: String!
  description: String
  storeRoomUid: String!
}

""""""
union StorageLocationResponse = StorageLocationType | OperationError

type StorageLocationType {
  uid: String!
  name: String!
  description: String
  storeRoomUid: String!
  storeRoom: StoreRoomType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  tag: String!
  children: [StorageSectionType!]
}

input StorageSectionInputType {
  name: String!
  description: String
  storageLocationUid: String!
}

""""""
union StorageSectionResponse = StorageSectionType | OperationError

type StorageSectionType {
  uid: String!
  name: String!
  description: String
  storageLocationUid: String!
  storageLocation: StorageLocationType
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  tag: String!
  children: [StorageContainerType!]
}

input StoreRoomInputType {
  name: String!
  description: String!
}

""""""
union StoreRoomResponse = StoreRoomType | OperationError

type StoreRoomType {
  uid: String!
  name: String!
  description: String
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  tag: String!
  children: [StorageLocationType!]
}

""""""
union StoreSampleResponse = StoredSamplesType | OperationError

input StoreSamplesInputType {
  sampleUid: String!
  storageSlot: String!
  storageSlotIndex: Int!
  storageContainerUid: String!
}

type StoredSamplesType {
  samples: [SampleType!]!
}

type Subscription {
  latestActivity: ActivityStreamType!
  streamAll: ActivityStreamType!
  streamProcesses: ActivityProcessType!
}

"""Union of possible outcomes when deleting some object"""
union SuccessErrorResponse = OperationSuccess | OperationError

input SupplierInputType {
  name: String!
  description: String = ""
  code: String = ""
}

""""""
union SupplierResponse = SupplierType | OperationError

type SupplierType {
  uid: String!
  name: String
  description: String
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type SurgicalHistoryType {
  procedure: String!
  cptCode: String
  date: String
  facility: String
  complications: String
}

type TestBillCursorPage {
  pageInfo: PageInfo!
  edges: [TestBillEdge!]
  items: [TestBillType!]
  totalCount: Int!
}

type TestBillEdge {
  cursor: String!
  node: TestBillType!
}

type TestBillInvoiceType {
  uid: String!
  testBillUid: String!
  testBill: TestBillType!
  jsonContent: JSONScalar
  pdfContent: BytesScalar
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

""""""
union TestBillTransactionResponse = TestBillTransactionType | OperationError

type TestBillTransactionType {
  uid: String!
  testBillUid: String!
  testBill: TestBillType!
  kind: String!
  amount: Float!
  isSuccess: Boolean!
  actionRequired: Boolean!
  processed: Boolean!
  notes: String!
  message: String!
  actionMessage: String!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

type TestBillType {
  uid: String!
  billId: String!
  patientUid: String!
  patient: PatientType!
  clientUid: String!
  client: ClientType!
  isActive: Boolean!
  toConfirm: Boolean!
  partial: Boolean!
  totalCharged: Float!
  totalPaid: Float!
  jsonContent: JSONScalar
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  orders: [AnalysisRequestType!]
}

type TravelHistoryType {
  destinationCountry: String!
  destinationCity: String
  startDate: String
  endDate: String
  purpose: String
  exposures: String
}

input UnitInputType {
  name: String!
  isSiUnit: Boolean!
}

""""""
union UnitResponse = UnitType | OperationError

type UnitType {
  uid: String!
  name: String!
  description: String
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type UnknownObjectType {
  message: String!
}

type UpdatedGroupPerms {
  group: GroupType!
  permission: PermissionType!
}

""""""
union UpdatedGroupPermsResponse = UpdatedGroupPerms | OperationError

scalar Upload

type UserAccessSummaryType {
  user: UserType!
  laboratories: [String!]!
  activeLaboratory: String
  groups: [GroupType!]!
  permissions: [PermissionType!]!
  isActive: Boolean!
  isBlocked: Boolean!
  isSuperuser: Boolean!
}

type UserCursorPage {
  pageInfo: PageInfo!
  edges: [UserEdge!]
  items: [UserType!]
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: UserType!
}

""""""
union UserLaboratoryAssignmentResponse = UserLaboratoryAssignmentType | OperationError

type UserLaboratoryAssignmentType {
  user: UserType!
  laboratories: [String!]!
  message: String!
}

type UserPreferenceType {
  uid: String!
  expandedMenu: Boolean
  departments: [DepartmentType!]
  theme: String
  createdByUid: String
  createdBy: UserPreferenceType
  createdAt: String
  updatedByUid: String
  updatedBy: UserPreferenceType
  updatedAt: String
}

""""""
union UserResponse = UserType | OperationError

type UserType {
  uid: String!
  firstName: String
  lastName: String
  email: String
  mobilePhone: String
  businessPhone: String
  groups: [GroupType!]
  preference: UserPreferenceType
  isActive: Boolean!
  isSuperuser: Boolean!
  bio: String
  avatar: String
  defaultRoute: String
  userName: String!
  loginRetry: Int!
  isBlocked: Boolean!
  activeLaboratoryUid: String
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
  laboratories: [String!]!
}

input VoucherCodeInput {
  code: String!
  voucherUid: String!
  usageLimit: Int!
  isActive: Boolean!
}

""""""
union VoucherCodeResponse = VoucherCodeType | OperationError

type VoucherCodeType {
  uid: String!
  code: String!
  voucherUid: String!
  voucher: VoucherType!
  usageLimit: Int!
  used: Int!
  isActive: Boolean!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String!
  createdByUid: String
  createdBy: UserType
  updatedAt: String!
  updatedByUid: String
  updatedBy: UserType
}

type VoucherCustomerType {
  uid: String!
  patientUid: String!
  patient: PatientType!
  voucherCodeUid: String!
  voucherCode: VoucherCodeType!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
}

input VoucherInput {
  name: String!
  usageLimit: Int!
  startDate: DateTime!
  endDate: DateTime!
  oncePerCustomer: Boolean!
  oncePerOrder: Boolean!
}

""""""
union VoucherResponse = VoucherType | OperationError

type VoucherType {
  uid: String!
  name: String!
  usageLimit: Int!
  used: Int!
  startDate: String!
  endDate: String!
  oncePerCustomer: Boolean!
  oncePerOrder: Boolean!
  laboratoryUid: String
  laboratory: LaboratoryType
  createdAt: String
  createdByUid: String
  createdBy: UserType
  updatedAt: String
  updatedByUid: String
  updatedBy: UserType
  codes: [VoucherCodeType!]
}

type WorkSheetCursorPage {
  pageInfo: PageInfo!
  edges: [WorkSheetEdge!]
  items: [WorkSheetType!]
  totalCount: Int!
}

type WorkSheetEdge {
  cursor: String!
  node: WorkSheetType!
}

""""""
union WorkSheetResponse = WorkSheetType | OperationError

""""""
union WorkSheetTemplateResponse = WorkSheetTemplateType | OperationError

type WorkSheetTemplateType {
  uid: String!
  worksheetType: String!
  reserved: JSONScalar
  numberOfSamples: Int
  rows: Int
  cols: Int
  rowWise: Boolean!
  state: String
  name: String!
  description: String
  analysisUid: String
  analysis: AnalysisType
  qcTemplateUid: String
  qcTemplate: QCTemplateType
  qcLevels: [QCLevelType!]
  instrumentUid: String
  instrument: InstrumentType
  sampleTypeUid: String
  sampleType: SampleTypeTyp
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

type WorkSheetType {
  uid: String!
  worksheetType: String!
  reserved: JSONScalar
  numberOfSamples: Int
  rows: Int
  cols: Int
  rowWise: Boolean!
  state: String
  templateUid: String
  template: WorkSheetTemplateType
  analystUid: String
  analyst: UserType
  worksheetId: String!
  analysisUid: String
  analysis: AnalysisType
  instrumentUid: String
  instrument: InstrumentType
  sampleTypeUid: String
  sampleType: SampleTypeTyp
  assignedCount: Int!
  analysisResults: [AnalysisResultType!]
  submittedByUid: String
  submittedBy: UserType
  dateSubmitted: DateTime
  verifiedByUid: String
  verifiedBy: UserType
  dateVerified: DateTime
  laboratoryUid: String
  laboratory: LaboratoryType
  createdByUid: String
  createdBy: UserType
  createdAt: String
  updatedByUid: String
  updatedBy: UserType
  updatedAt: String
}

union WorkSheetTypeSampleTypeAnalysisResultTypeReportMetaTypeUnknownObjectType = WorkSheetType | SampleType | AnalysisResultType | ReportMetaType | UnknownObjectType

""""""
union WorkSheetsResponse = WorksheetListingType | OperationError

type WorksheetListingType {
  worksheets: [WorkSheetType!]
}

input WorksheetTemplateInputType {
  name: String!
  sampleTypeUid: String!
  reserved: [ReservedInputType!] = null
  analysisUid: String = null
  numberOfSamples: Int = null
  instrumentUid: String = null
  worksheetType: String = null
  rows: Int = null
  cols: Int = null
  rowWise: Boolean = true
  description: String = null
  qcTemplateUid: String = null
  profiles: [String!] = null
}
